// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fmt"
	"github.com/go-eagle/eagle/pkg/app"
	log2 "github.com/go-eagle/eagle/pkg/log"
	"github.com/go-eagle/eagle/pkg/transport/http"
	"github.com/go-microservice/chatgram/internal/repository"
	"github.com/go-microservice/chatgram/internal/server"
	"github.com/go-microservice/chatgram/internal/service"
	"log"
	http2 "net/http"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func InitApp(cfg *app.Config, config *app.ServerConfig) (*app.App, error) {
	userServiceClient := repository.NewUserClient()
	userServiceServer := service.NewUserServiceServer(userServiceClient)
	relationServiceClient := repository.NewRelationClient()
	relationServiceServer := service.NewRelationServiceServer(relationServiceClient, userServiceClient)
	postServiceClient := repository.NewPostClient()
	likeServiceClient := repository.NewLikeClient()
	postServiceServer := service.NewPostServiceServer(postServiceClient, likeServiceClient, userServiceClient)
	commentServiceClient := repository.NewCommentClient()
	commentServiceServer := service.NewCommentServiceServer(commentServiceClient, postServiceClient, userServiceClient)
	likeServiceServer := service.NewLikeServiceServer(likeServiceClient, postServiceClient, commentServiceClient, userServiceClient)
	httpServer := server.NewHTTPServer(config, userServiceServer, relationServiceServer, postServiceServer, commentServiceServer, likeServiceServer)
	appApp := newApp(cfg, httpServer)
	return appApp, nil
}

// wire.go:

func newApp(cfg *app.Config, httpSrv *http.Server) *app.App {

	go func() {
		fmt.Printf("Listening and serving PProf HTTP on %s\n", cfg.PprofPort)
		if err := http2.ListenAndServe(cfg.PprofPort, http2.DefaultServeMux); err != nil && err != http2.ErrServerClosed {
			log.Fatalf("listen ListenAndServe for PProf, err: %s", err.Error())
		}
	}()

	return app.New(app.WithName(cfg.Name), app.WithVersion(cfg.Version), app.WithLogger(log2.GetLogger()), app.WithServer(httpSrv))
}
