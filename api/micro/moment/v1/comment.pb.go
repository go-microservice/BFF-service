// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/micro/moment/v1/comment.proto

package v1

import (
	fmt "fmt"
	v1 "github.com/go-microservice/ins-api/api/micro/user/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Comment struct {
	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PostId     int64    `protobuf:"varint,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	User       *v1.User `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Content    string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	RootId     int64    `protobuf:"varint,5,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"`
	ParentId   int64    `protobuf:"varint,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	LikeCount  int32    `protobuf:"varint,7,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	ReplyCount int32    `protobuf:"varint,8,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	Score      int64    `protobuf:"varint,9,opt,name=score,proto3" json:"score,omitempty"`
	DelFlag    int32    `protobuf:"varint,10,opt,name=del_flag,json=delFlag,proto3" json:"del_flag,omitempty"`
	CreatedAt  int64    `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  int64    `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeviceType string   `protobuf:"bytes,13,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Ip         string   `protobuf:"bytes,14,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{0}
}
func (m *Comment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return m.Size()
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Comment) GetPostId() int64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *Comment) GetUser() *v1.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetRootId() int64 {
	if m != nil {
		return m.RootId
	}
	return 0
}

func (m *Comment) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Comment) GetLikeCount() int32 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *Comment) GetReplyCount() int32 {
	if m != nil {
		return m.ReplyCount
	}
	return 0
}

func (m *Comment) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Comment) GetDelFlag() int32 {
	if m != nil {
		return m.DelFlag
	}
	return 0
}

func (m *Comment) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Comment) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Comment) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *Comment) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type CreateCommentRequest struct {
	PostId     int64  `protobuf:"varint,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	UserId     int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content    string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	RootId     int64  `protobuf:"varint,4,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"`
	ParentId   int64  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DeviceType string `protobuf:"bytes,6,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Ip         string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *CreateCommentRequest) Reset()         { *m = CreateCommentRequest{} }
func (m *CreateCommentRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCommentRequest) ProtoMessage()    {}
func (*CreateCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{1}
}
func (m *CreateCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentRequest.Merge(m, src)
}
func (m *CreateCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentRequest proto.InternalMessageInfo

func (m *CreateCommentRequest) GetPostId() int64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *CreateCommentRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateCommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateCommentRequest) GetRootId() int64 {
	if m != nil {
		return m.RootId
	}
	return 0
}

func (m *CreateCommentRequest) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *CreateCommentRequest) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *CreateCommentRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type CreateCommentReply struct {
	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *CreateCommentReply) Reset()         { *m = CreateCommentReply{} }
func (m *CreateCommentReply) String() string { return proto.CompactTextString(m) }
func (*CreateCommentReply) ProtoMessage()    {}
func (*CreateCommentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{2}
}
func (m *CreateCommentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCommentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCommentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCommentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentReply.Merge(m, src)
}
func (m *CreateCommentReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateCommentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentReply proto.InternalMessageInfo

func (m *CreateCommentReply) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type UpdateCommentRequest struct {
}

func (m *UpdateCommentRequest) Reset()         { *m = UpdateCommentRequest{} }
func (m *UpdateCommentRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCommentRequest) ProtoMessage()    {}
func (*UpdateCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{3}
}
func (m *UpdateCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCommentRequest.Merge(m, src)
}
func (m *UpdateCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCommentRequest proto.InternalMessageInfo

type UpdateCommentReply struct {
}

func (m *UpdateCommentReply) Reset()         { *m = UpdateCommentReply{} }
func (m *UpdateCommentReply) String() string { return proto.CompactTextString(m) }
func (*UpdateCommentReply) ProtoMessage()    {}
func (*UpdateCommentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{4}
}
func (m *UpdateCommentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCommentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCommentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCommentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCommentReply.Merge(m, src)
}
func (m *UpdateCommentReply) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCommentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCommentReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCommentReply proto.InternalMessageInfo

type DeleteCommentRequest struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DelFlag int32  `protobuf:"varint,2,opt,name=del_flag,json=delFlag,proto3" json:"del_flag,omitempty"`
}

func (m *DeleteCommentRequest) Reset()         { *m = DeleteCommentRequest{} }
func (m *DeleteCommentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCommentRequest) ProtoMessage()    {}
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{5}
}
func (m *DeleteCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommentRequest.Merge(m, src)
}
func (m *DeleteCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommentRequest proto.InternalMessageInfo

func (m *DeleteCommentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteCommentRequest) GetDelFlag() int32 {
	if m != nil {
		return m.DelFlag
	}
	return 0
}

type DeleteCommentReply struct {
}

func (m *DeleteCommentReply) Reset()         { *m = DeleteCommentReply{} }
func (m *DeleteCommentReply) String() string { return proto.CompactTextString(m) }
func (*DeleteCommentReply) ProtoMessage()    {}
func (*DeleteCommentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{6}
}
func (m *DeleteCommentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCommentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCommentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCommentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommentReply.Merge(m, src)
}
func (m *DeleteCommentReply) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCommentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommentReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommentReply proto.InternalMessageInfo

type GetCommentRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" uri:"id"`
}

func (m *GetCommentRequest) Reset()         { *m = GetCommentRequest{} }
func (m *GetCommentRequest) String() string { return proto.CompactTextString(m) }
func (*GetCommentRequest) ProtoMessage()    {}
func (*GetCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{7}
}
func (m *GetCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentRequest.Merge(m, src)
}
func (m *GetCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentRequest proto.InternalMessageInfo

func (m *GetCommentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetCommentReply struct {
	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *GetCommentReply) Reset()         { *m = GetCommentReply{} }
func (m *GetCommentReply) String() string { return proto.CompactTextString(m) }
func (*GetCommentReply) ProtoMessage()    {}
func (*GetCommentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{8}
}
func (m *GetCommentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCommentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentReply.Merge(m, src)
}
func (m *GetCommentReply) XXX_Size() int {
	return m.Size()
}
func (m *GetCommentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentReply proto.InternalMessageInfo

func (m *GetCommentReply) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type ListCommentRequest struct {
	LastId int64 `protobuf:"varint,1,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty" form:"last_id"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" form:"limit"`
	PostId int64 `protobuf:"varint,3,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty" form:"post_id"`
}

func (m *ListCommentRequest) Reset()         { *m = ListCommentRequest{} }
func (m *ListCommentRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommentRequest) ProtoMessage()    {}
func (*ListCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{9}
}
func (m *ListCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentRequest.Merge(m, src)
}
func (m *ListCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentRequest proto.InternalMessageInfo

func (m *ListCommentRequest) GetLastId() int64 {
	if m != nil {
		return m.LastId
	}
	return 0
}

func (m *ListCommentRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCommentRequest) GetPostId() int64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

type ListCommentReply struct {
	Items   []*Comment `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Count   int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	HasMore bool       `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more"`
	LastId  string     `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id"`
}

func (m *ListCommentReply) Reset()         { *m = ListCommentReply{} }
func (m *ListCommentReply) String() string { return proto.CompactTextString(m) }
func (*ListCommentReply) ProtoMessage()    {}
func (*ListCommentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{10}
}
func (m *ListCommentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCommentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCommentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCommentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentReply.Merge(m, src)
}
func (m *ListCommentReply) XXX_Size() int {
	return m.Size()
}
func (m *ListCommentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentReply proto.InternalMessageInfo

func (m *ListCommentReply) GetItems() []*Comment {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListCommentReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListCommentReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ListCommentReply) GetLastId() string {
	if m != nil {
		return m.LastId
	}
	return ""
}

type ReplyCommentRequest struct {
	CommentId  int64  `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	UserId     int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content    string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	RootId     int64  `protobuf:"varint,4,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"`
	ParentId   int64  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DeviceType string `protobuf:"bytes,6,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Ip         string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *ReplyCommentRequest) Reset()         { *m = ReplyCommentRequest{} }
func (m *ReplyCommentRequest) String() string { return proto.CompactTextString(m) }
func (*ReplyCommentRequest) ProtoMessage()    {}
func (*ReplyCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{11}
}
func (m *ReplyCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyCommentRequest.Merge(m, src)
}
func (m *ReplyCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplyCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyCommentRequest proto.InternalMessageInfo

func (m *ReplyCommentRequest) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

func (m *ReplyCommentRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReplyCommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReplyCommentRequest) GetRootId() int64 {
	if m != nil {
		return m.RootId
	}
	return 0
}

func (m *ReplyCommentRequest) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *ReplyCommentRequest) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *ReplyCommentRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type ReplyCommentReply struct {
	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *ReplyCommentReply) Reset()         { *m = ReplyCommentReply{} }
func (m *ReplyCommentReply) String() string { return proto.CompactTextString(m) }
func (*ReplyCommentReply) ProtoMessage()    {}
func (*ReplyCommentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{12}
}
func (m *ReplyCommentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyCommentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyCommentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyCommentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyCommentReply.Merge(m, src)
}
func (m *ReplyCommentReply) XXX_Size() int {
	return m.Size()
}
func (m *ReplyCommentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyCommentReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyCommentReply proto.InternalMessageInfo

func (m *ReplyCommentReply) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type ListReplyRequest struct {
	LastId    int64 `protobuf:"varint,1,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty" form:"last_id"`
	Limit     int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" form:"limit"`
	CommentId int64 `protobuf:"varint,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty" form:"comment_id"`
}

func (m *ListReplyRequest) Reset()         { *m = ListReplyRequest{} }
func (m *ListReplyRequest) String() string { return proto.CompactTextString(m) }
func (*ListReplyRequest) ProtoMessage()    {}
func (*ListReplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{13}
}
func (m *ListReplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReplyRequest.Merge(m, src)
}
func (m *ListReplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListReplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListReplyRequest proto.InternalMessageInfo

func (m *ListReplyRequest) GetLastId() int64 {
	if m != nil {
		return m.LastId
	}
	return 0
}

func (m *ListReplyRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListReplyRequest) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

type ListReplyReply struct {
	Items   []*Comment `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Count   int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	HasMore bool       `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more"`
	LastId  string     `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id"`
}

func (m *ListReplyReply) Reset()         { *m = ListReplyReply{} }
func (m *ListReplyReply) String() string { return proto.CompactTextString(m) }
func (*ListReplyReply) ProtoMessage()    {}
func (*ListReplyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee01eab60a7f47a8, []int{14}
}
func (m *ListReplyReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReplyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReplyReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReplyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReplyReply.Merge(m, src)
}
func (m *ListReplyReply) XXX_Size() int {
	return m.Size()
}
func (m *ListReplyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReplyReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListReplyReply proto.InternalMessageInfo

func (m *ListReplyReply) GetItems() []*Comment {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListReplyReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListReplyReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ListReplyReply) GetLastId() string {
	if m != nil {
		return m.LastId
	}
	return ""
}

func init() {
	proto.RegisterType((*Comment)(nil), "api.micro.moment.v1.Comment")
	proto.RegisterType((*CreateCommentRequest)(nil), "api.micro.moment.v1.CreateCommentRequest")
	proto.RegisterType((*CreateCommentReply)(nil), "api.micro.moment.v1.CreateCommentReply")
	proto.RegisterType((*UpdateCommentRequest)(nil), "api.micro.moment.v1.UpdateCommentRequest")
	proto.RegisterType((*UpdateCommentReply)(nil), "api.micro.moment.v1.UpdateCommentReply")
	proto.RegisterType((*DeleteCommentRequest)(nil), "api.micro.moment.v1.DeleteCommentRequest")
	proto.RegisterType((*DeleteCommentReply)(nil), "api.micro.moment.v1.DeleteCommentReply")
	proto.RegisterType((*GetCommentRequest)(nil), "api.micro.moment.v1.GetCommentRequest")
	proto.RegisterType((*GetCommentReply)(nil), "api.micro.moment.v1.GetCommentReply")
	proto.RegisterType((*ListCommentRequest)(nil), "api.micro.moment.v1.ListCommentRequest")
	proto.RegisterType((*ListCommentReply)(nil), "api.micro.moment.v1.ListCommentReply")
	proto.RegisterType((*ReplyCommentRequest)(nil), "api.micro.moment.v1.ReplyCommentRequest")
	proto.RegisterType((*ReplyCommentReply)(nil), "api.micro.moment.v1.ReplyCommentReply")
	proto.RegisterType((*ListReplyRequest)(nil), "api.micro.moment.v1.ListReplyRequest")
	proto.RegisterType((*ListReplyReply)(nil), "api.micro.moment.v1.ListReplyReply")
}

func init() { proto.RegisterFile("api/micro/moment/v1/comment.proto", fileDescriptor_ee01eab60a7f47a8) }

var fileDescriptor_ee01eab60a7f47a8 = []byte{
	// 1030 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0x93, 0xe6, 0xd7, 0x4b, 0x36, 0x34, 0xd3, 0x2c, 0xf1, 0x66, 0xbb, 0x49, 0x30, 0x4b,
	0x37, 0xec, 0x6a, 0x63, 0xa5, 0x20, 0x24, 0x8a, 0x38, 0x34, 0x45, 0x40, 0x44, 0x91, 0x90, 0x61,
	0x2f, 0x5c, 0x22, 0x37, 0x9e, 0xa6, 0x06, 0x27, 0x63, 0xec, 0x49, 0xa4, 0xf0, 0x43, 0x20, 0xfe,
	0x01, 0x90, 0x90, 0xb8, 0xf1, 0xb7, 0x20, 0x6e, 0x70, 0x41, 0x2b, 0x71, 0xe1, 0x14, 0xa1, 0x96,
	0x53, 0x8f, 0x3d, 0x71, 0x44, 0x6f, 0xc6, 0x69, 0xec, 0xc4, 0x51, 0x57, 0x5a, 0xad, 0x04, 0xa7,
	0x78, 0xde, 0x7b, 0xf3, 0x7d, 0xf3, 0xbe, 0xf7, 0xe6, 0x65, 0xe0, 0x05, 0xd3, 0xb5, 0xf5, 0xa1,
	0xdd, 0xf7, 0x98, 0x3e, 0x64, 0x43, 0x3a, 0xe2, 0xfa, 0xa4, 0xad, 0xf7, 0xd9, 0x10, 0x3f, 0x5b,
	0xae, 0xc7, 0x38, 0x23, 0xdb, 0xa6, 0x6b, 0xb7, 0x44, 0x48, 0x4b, 0x86, 0xb4, 0x26, 0xed, 0xea,
	0xce, 0x80, 0xb1, 0x81, 0x43, 0x75, 0xdc, 0x6e, 0x8e, 0x46, 0x8c, 0x9b, 0xdc, 0x66, 0x23, 0x5f,
	0x6e, 0xa9, 0xee, 0x2c, 0x50, 0xc7, 0x3e, 0xf5, 0x10, 0x13, 0x7f, 0x03, 0xaf, 0x3a, 0x60, 0x03,
	0xa6, 0x8b, 0xef, 0xe3, 0xf1, 0x89, 0x8e, 0x2b, 0xe9, 0xd1, 0xbe, 0x4b, 0x42, 0xe6, 0x50, 0x92,
	0x93, 0x22, 0x24, 0x6c, 0x4b, 0x55, 0x1a, 0x4a, 0x33, 0x67, 0x24, 0x6c, 0x8b, 0x54, 0x20, 0xe3,
	0x32, 0x9f, 0xf7, 0x6c, 0x4b, 0x4d, 0x34, 0x94, 0x66, 0xd2, 0x48, 0xe3, 0xb2, 0x6b, 0x91, 0x07,
	0xb0, 0x89, 0xe0, 0x6a, 0xb2, 0xa1, 0x34, 0xf3, 0x7b, 0x95, 0xd6, 0xe2, 0xb8, 0x82, 0x73, 0xd2,
	0x6e, 0x3d, 0xf2, 0xa9, 0x67, 0x88, 0x20, 0xa2, 0x42, 0xa6, 0xcf, 0x46, 0x9c, 0x8e, 0xb8, 0xba,
	0x29, 0xa0, 0xe7, 0x4b, 0xc4, 0xf7, 0x18, 0x13, 0xf8, 0x29, 0x89, 0x8f, 0xcb, 0xae, 0x45, 0x6e,
	0x43, 0xce, 0x35, 0x3d, 0x3a, 0x12, 0xae, 0xb4, 0x70, 0x65, 0xa5, 0xa1, 0x6b, 0x91, 0x3b, 0x00,
	0x8e, 0xfd, 0x29, 0xed, 0xf5, 0xd9, 0x78, 0xc4, 0xd5, 0x4c, 0x43, 0x69, 0xa6, 0x8c, 0x1c, 0x5a,
	0x0e, 0xd1, 0x40, 0xea, 0x90, 0xf7, 0xa8, 0xeb, 0x4c, 0x03, 0x7f, 0x56, 0xf8, 0x41, 0x98, 0x64,
	0x40, 0x19, 0x52, 0x7e, 0x9f, 0x79, 0x54, 0xcd, 0x09, 0x60, 0xb9, 0x20, 0xb7, 0x20, 0x6b, 0x51,
	0xa7, 0x77, 0xe2, 0x98, 0x03, 0x15, 0xc4, 0x9e, 0x8c, 0x45, 0x9d, 0xb7, 0x1d, 0x73, 0x80, 0x84,
	0x7d, 0x8f, 0x9a, 0x9c, 0x5a, 0x3d, 0x93, 0xab, 0x79, 0xb1, 0x2b, 0x17, 0x58, 0x0e, 0x38, 0xba,
	0xc7, 0xae, 0x35, 0x77, 0x17, 0xa4, 0x3b, 0xb0, 0x1c, 0x88, 0xf3, 0x58, 0x74, 0x62, 0xf7, 0x69,
	0x8f, 0x4f, 0x5d, 0xaa, 0xde, 0x10, 0x12, 0x80, 0x34, 0x7d, 0x34, 0x75, 0xa9, 0x50, 0xdd, 0x55,
	0x8b, 0x81, 0xea, 0xae, 0xf6, 0x9b, 0x02, 0xe5, 0x43, 0x81, 0x1e, 0xd4, 0xc5, 0xa0, 0x9f, 0x8d,
	0xa9, 0xcf, 0xc3, 0xe5, 0x50, 0x22, 0xe5, 0xa8, 0x40, 0x06, 0x95, 0x0e, 0xd5, 0x09, 0x97, 0x5d,
	0x2b, 0x2c, 0x7d, 0x72, 0xad, 0xf4, 0x9b, 0xeb, 0xa5, 0x4f, 0x2d, 0x49, 0xbf, 0x94, 0x4b, 0x7a,
	0x4d, 0x2e, 0x99, 0xab, 0x5c, 0x8e, 0x80, 0x2c, 0xa5, 0xe2, 0x3a, 0x53, 0xf2, 0x1a, 0x1e, 0x4b,
	0xac, 0x45, 0x22, 0xf9, 0xbd, 0x9d, 0x56, 0x4c, 0xc3, 0xb7, 0xe6, 0x7b, 0xe6, 0xc1, 0xda, 0xf3,
	0x50, 0x7e, 0x24, 0x74, 0x8d, 0x0a, 0xa3, 0x95, 0x81, 0x2c, 0xd9, 0x5d, 0x67, 0xaa, 0x1d, 0x40,
	0xf9, 0x2d, 0xea, 0xd0, 0x15, 0x19, 0x97, 0xbb, 0x3c, 0x5c, 0xf9, 0x44, 0xa4, 0xf2, 0x08, 0xbc,
	0x04, 0x81, 0xc0, 0x6d, 0x28, 0xbd, 0x43, 0xf9, 0x12, 0xea, 0xce, 0x02, 0xb5, 0x53, 0xb8, 0x9c,
	0xd5, 0xb3, 0x63, 0xcf, 0xde, 0xd7, 0x6c, 0x4b, 0x43, 0x0e, 0xad, 0x0b, 0xcf, 0x85, 0xb7, 0x3c,
	0x8d, 0x08, 0x3f, 0x2a, 0x40, 0x8e, 0x6c, 0x7f, 0x99, 0xff, 0x01, 0x64, 0x1c, 0x33, 0xd4, 0x1c,
	0x1d, 0x72, 0x39, 0xab, 0x17, 0x4f, 0x98, 0x37, 0xdc, 0xd7, 0x02, 0x87, 0x66, 0xa4, 0xf1, 0xab,
	0x6b, 0x91, 0x5d, 0x48, 0x39, 0xf6, 0xd0, 0xe6, 0x32, 0xdf, 0xce, 0xd6, 0xe5, 0xac, 0x5e, 0x08,
	0x42, 0xd1, 0xac, 0x19, 0xd2, 0x8d, 0xa0, 0xf3, 0x8e, 0x4b, 0x2e, 0x83, 0x06, 0x0e, 0x6d, 0xde,
	0x85, 0xda, 0x2f, 0x0a, 0x6c, 0x45, 0x0e, 0x86, 0x59, 0xbe, 0x09, 0x29, 0x9b, 0xd3, 0xa1, 0xaf,
	0x2a, 0x8d, 0xe4, 0x75, 0x39, 0x76, 0x72, 0x17, 0xb3, 0xba, 0x0c, 0x37, 0xe4, 0x0f, 0xa9, 0x43,
	0x4a, 0x5e, 0x63, 0xd1, 0xd7, 0x32, 0x40, 0x18, 0x0c, 0xf9, 0x43, 0xee, 0x41, 0xf6, 0xd4, 0xf4,
	0x7b, 0x43, 0xbc, 0xcf, 0x78, 0xc4, 0x6c, 0xa7, 0x70, 0x31, 0xab, 0x5f, 0xd9, 0x8c, 0xcc, 0xa9,
	0xe9, 0xbf, 0x8f, 0xf7, 0xfb, 0xee, 0x42, 0x1f, 0x31, 0x85, 0x3a, 0xf9, 0x8b, 0x59, 0x7d, 0x6e,
	0x9a, 0x0b, 0xa3, 0xfd, 0xae, 0xc0, 0xb6, 0x21, 0x47, 0x45, 0x44, 0x5d, 0x1c, 0x01, 0xd2, 0xb2,
	0xb8, 0x7d, 0xb9, 0xc0, 0xf2, 0x9f, 0xbe, 0x80, 0xef, 0x41, 0x29, 0x9a, 0xcf, 0xd3, 0xb4, 0xde,
	0x4f, 0x41, 0x85, 0x05, 0xca, 0x33, 0x6d, 0xbc, 0x57, 0x23, 0x7a, 0xcb, 0xde, 0xbb, 0x79, 0x39,
	0xab, 0x97, 0x64, 0xf0, 0xc2, 0xa7, 0x85, 0xca, 0xa0, 0xfd, 0xac, 0x40, 0x31, 0x74, 0xbe, 0xff,
	0x5f, 0xff, 0xed, 0xfd, 0x93, 0x86, 0x62, 0x70, 0x9a, 0x0f, 0xa9, 0x87, 0x55, 0x25, 0x5f, 0xc2,
	0x8d, 0xc8, 0x08, 0x25, 0x2f, 0xc7, 0xe7, 0x10, 0xf3, 0x8f, 0x51, 0xbd, 0xf7, 0x24, 0xa1, 0x38,
	0xd2, 0x2a, 0xdf, 0xfe, 0xf1, 0xf7, 0x0f, 0x89, 0x92, 0x56, 0x08, 0xbd, 0x45, 0xfc, 0x7d, 0xe5,
	0x3e, 0xb2, 0x47, 0x26, 0xe0, 0x1a, 0xf6, 0xb8, 0x41, 0xbb, 0x86, 0x3d, 0x66, 0xa0, 0x06, 0xec,
	0xf7, 0x57, 0xd8, 0xc7, 0x00, 0x8b, 0xb1, 0x49, 0x76, 0x63, 0xf1, 0x56, 0x46, 0x71, 0xf5, 0xee,
	0xb5, 0x71, 0x48, 0x7a, 0x4b, 0x90, 0x6e, 0x93, 0x52, 0x98, 0x54, 0xff, 0xc2, 0xb6, 0xbe, 0x22,
	0x9f, 0xcb, 0x36, 0x7a, 0x97, 0x5d, 0x51, 0xc7, 0xa7, 0xb2, 0x3a, 0x86, 0xab, 0x2f, 0x5d, 0x1f,
	0x88, 0xe4, 0xaa, 0x20, 0x27, 0x64, 0x2b, 0x42, 0x7e, 0xca, 0x38, 0xf9, 0x46, 0x81, 0x12, 0x86,
	0x1f, 0x99, 0x9c, 0xfa, 0xcf, 0x8c, 0xff, 0xb6, 0xe0, 0xbf, 0x49, 0xb6, 0x23, 0xfc, 0x8e, 0xe0,
	0x24, 0x5f, 0x43, 0x21, 0x3c, 0x33, 0x48, 0x33, 0x16, 0x33, 0x66, 0x4c, 0x56, 0x77, 0x9f, 0x20,
	0x12, 0xe9, 0xef, 0x08, 0xfa, 0x8a, 0x46, 0x22, 0xf4, 0xe2, 0x8d, 0x86, 0x65, 0xf7, 0x21, 0x77,
	0x75, 0x8d, 0xc9, 0xfa, 0x8c, 0xc2, 0x63, 0xa8, 0xfa, 0xe2, 0x75, 0x61, 0xc8, 0x5b, 0x15, 0xbc,
	0x65, 0x12, 0xc3, 0xdb, 0xf9, 0xe4, 0xd7, 0xb3, 0x9a, 0xf2, 0xf8, 0xac, 0xa6, 0xfc, 0x75, 0x56,
	0x53, 0xbe, 0x3f, 0xaf, 0x6d, 0x3c, 0x3e, 0xaf, 0x6d, 0xfc, 0x79, 0x5e, 0xdb, 0x80, 0xb8, 0xd7,
	0xf8, 0x07, 0xca, 0xc7, 0xaf, 0x0f, 0x6c, 0x7e, 0x3a, 0x3e, 0x6e, 0xf5, 0xd9, 0x50, 0x1f, 0xb0,
	0x87, 0x22, 0xc0, 0x97, 0x97, 0x56, 0xb7, 0x47, 0xfe, 0x43, 0xf1, 0x4e, 0x5f, 0x7d, 0xea, 0xbf,
	0x31, 0x69, 0x1f, 0xa7, 0xc5, 0xdb, 0xfb, 0x95, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x30,
	0xf4, 0xba, 0x0b, 0x0c, 0x00, 0x00,
}

func (m *Comment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Comment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintComment(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x6a
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x60
	}
	if m.CreatedAt != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x58
	}
	if m.DelFlag != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.DelFlag))
		i--
		dAtA[i] = 0x50
	}
	if m.Score != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x48
	}
	if m.ReplyCount != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ReplyCount))
		i--
		dAtA[i] = 0x40
	}
	if m.LikeCount != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.LikeCount))
		i--
		dAtA[i] = 0x38
	}
	if m.ParentId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x30
	}
	if m.RootId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.RootId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PostId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintComment(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x32
	}
	if m.ParentId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x28
	}
	if m.RootId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.RootId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.PostId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateCommentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCommentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Comment != nil {
		{
			size, err := m.Comment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateCommentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCommentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCommentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelFlag != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.DelFlag))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCommentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCommentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCommentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCommentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Comment != nil {
		{
			size, err := m.Comment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PostId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.LastId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.LastId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListCommentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCommentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCommentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastId) > 0 {
		i -= len(m.LastId)
		copy(dAtA[i:], m.LastId)
		i = encodeVarintComment(dAtA, i, uint64(len(m.LastId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplyCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintComment(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x32
	}
	if m.ParentId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x28
	}
	if m.RootId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.RootId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintComment(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.CommentId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyCommentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyCommentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyCommentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Comment != nil {
		{
			size, err := m.Comment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListReplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommentId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.LastId != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.LastId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListReplyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReplyReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReplyReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastId) > 0 {
		i -= len(m.LastId)
		copy(dAtA[i:], m.LastId)
		i = encodeVarintComment(dAtA, i, uint64(len(m.LastId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintComment(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintComment(dAtA []byte, offset int, v uint64) int {
	offset -= sovComment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Comment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.PostId != 0 {
		n += 1 + sovComment(uint64(m.PostId))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.RootId != 0 {
		n += 1 + sovComment(uint64(m.RootId))
	}
	if m.ParentId != 0 {
		n += 1 + sovComment(uint64(m.ParentId))
	}
	if m.LikeCount != 0 {
		n += 1 + sovComment(uint64(m.LikeCount))
	}
	if m.ReplyCount != 0 {
		n += 1 + sovComment(uint64(m.ReplyCount))
	}
	if m.Score != 0 {
		n += 1 + sovComment(uint64(m.Score))
	}
	if m.DelFlag != 0 {
		n += 1 + sovComment(uint64(m.DelFlag))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovComment(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovComment(uint64(m.UpdatedAt))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func (m *CreateCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PostId != 0 {
		n += 1 + sovComment(uint64(m.PostId))
	}
	if m.UserId != 0 {
		n += 1 + sovComment(uint64(m.UserId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.RootId != 0 {
		n += 1 + sovComment(uint64(m.RootId))
	}
	if m.ParentId != 0 {
		n += 1 + sovComment(uint64(m.ParentId))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func (m *CreateCommentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func (m *UpdateCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateCommentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.DelFlag != 0 {
		n += 1 + sovComment(uint64(m.DelFlag))
	}
	return n
}

func (m *DeleteCommentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func (m *GetCommentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func (m *ListCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastId != 0 {
		n += 1 + sovComment(uint64(m.LastId))
	}
	if m.Limit != 0 {
		n += 1 + sovComment(uint64(m.Limit))
	}
	if m.PostId != 0 {
		n += 1 + sovComment(uint64(m.PostId))
	}
	return n
}

func (m *ListCommentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovComment(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovComment(uint64(m.Count))
	}
	if m.HasMore {
		n += 2
	}
	l = len(m.LastId)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func (m *ReplyCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommentId != 0 {
		n += 1 + sovComment(uint64(m.CommentId))
	}
	if m.UserId != 0 {
		n += 1 + sovComment(uint64(m.UserId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	if m.RootId != 0 {
		n += 1 + sovComment(uint64(m.RootId))
	}
	if m.ParentId != 0 {
		n += 1 + sovComment(uint64(m.ParentId))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func (m *ReplyCommentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func (m *ListReplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastId != 0 {
		n += 1 + sovComment(uint64(m.LastId))
	}
	if m.Limit != 0 {
		n += 1 + sovComment(uint64(m.Limit))
	}
	if m.CommentId != 0 {
		n += 1 + sovComment(uint64(m.CommentId))
	}
	return n
}

func (m *ListReplyReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovComment(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovComment(uint64(m.Count))
	}
	if m.HasMore {
		n += 2
	}
	l = len(m.LastId)
	if l > 0 {
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func sovComment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComment(x uint64) (n int) {
	return sovComment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Comment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &v1.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootId", wireType)
			}
			m.RootId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RootId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCount", wireType)
			}
			m.ReplyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelFlag", wireType)
			}
			m.DelFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootId", wireType)
			}
			m.RootId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RootId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCommentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCommentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCommentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCommentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCommentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCommentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelFlag", wireType)
			}
			m.DelFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			m.LastId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCommentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCommentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCommentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Comment{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootId", wireType)
			}
			m.RootId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RootId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyCommentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyCommentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyCommentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			m.LastId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReplyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReplyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReplyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Comment{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComment = fmt.Errorf("proto: unexpected end of group")
)
