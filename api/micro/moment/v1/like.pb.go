// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/micro/moment/v1/like.proto

package v1

import (
	fmt "fmt"
	v1 "github.com/go-microservice/ins-api/api/micro/user/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Like struct {
	Id   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User *v1.User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *Like) Reset()         { *m = Like{} }
func (m *Like) String() string { return proto.CompactTextString(m) }
func (*Like) ProtoMessage()    {}
func (*Like) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{0}
}
func (m *Like) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Like) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Like.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Like) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Like.Merge(m, src)
}
func (m *Like) XXX_Size() int {
	return m.Size()
}
func (m *Like) XXX_DiscardUnknown() {
	xxx_messageInfo_Like.DiscardUnknown(m)
}

var xxx_messageInfo_Like proto.InternalMessageInfo

func (m *Like) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Like) GetUser() *v1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type CreatePostLikeRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PostId int64 `protobuf:"varint,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
}

func (m *CreatePostLikeRequest) Reset()         { *m = CreatePostLikeRequest{} }
func (m *CreatePostLikeRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePostLikeRequest) ProtoMessage()    {}
func (*CreatePostLikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{1}
}
func (m *CreatePostLikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePostLikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePostLikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePostLikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePostLikeRequest.Merge(m, src)
}
func (m *CreatePostLikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePostLikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePostLikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePostLikeRequest proto.InternalMessageInfo

func (m *CreatePostLikeRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreatePostLikeRequest) GetPostId() int64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

type CreatePostLikeReply struct {
}

func (m *CreatePostLikeReply) Reset()         { *m = CreatePostLikeReply{} }
func (m *CreatePostLikeReply) String() string { return proto.CompactTextString(m) }
func (*CreatePostLikeReply) ProtoMessage()    {}
func (*CreatePostLikeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{2}
}
func (m *CreatePostLikeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePostLikeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePostLikeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePostLikeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePostLikeReply.Merge(m, src)
}
func (m *CreatePostLikeReply) XXX_Size() int {
	return m.Size()
}
func (m *CreatePostLikeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePostLikeReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePostLikeReply proto.InternalMessageInfo

type DeletePostLikeRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PostId int64 `protobuf:"varint,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
}

func (m *DeletePostLikeRequest) Reset()         { *m = DeletePostLikeRequest{} }
func (m *DeletePostLikeRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePostLikeRequest) ProtoMessage()    {}
func (*DeletePostLikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{3}
}
func (m *DeletePostLikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePostLikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePostLikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePostLikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePostLikeRequest.Merge(m, src)
}
func (m *DeletePostLikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePostLikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePostLikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePostLikeRequest proto.InternalMessageInfo

func (m *DeletePostLikeRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeletePostLikeRequest) GetPostId() int64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

type DeletePostLikeReply struct {
}

func (m *DeletePostLikeReply) Reset()         { *m = DeletePostLikeReply{} }
func (m *DeletePostLikeReply) String() string { return proto.CompactTextString(m) }
func (*DeletePostLikeReply) ProtoMessage()    {}
func (*DeletePostLikeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{4}
}
func (m *DeletePostLikeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePostLikeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePostLikeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePostLikeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePostLikeReply.Merge(m, src)
}
func (m *DeletePostLikeReply) XXX_Size() int {
	return m.Size()
}
func (m *DeletePostLikeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePostLikeReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePostLikeReply proto.InternalMessageInfo

type ListPostLikeRequest struct {
	// @gotags: form:"post_id"
	PostId int64 `protobuf:"varint,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty" form:"post_id"`
	// @gotags: form:"last_id"
	LastId int64 `protobuf:"varint,2,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty" form:"last_id"`
	// @gotags: form:"limit"
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" form:"limit"`
}

func (m *ListPostLikeRequest) Reset()         { *m = ListPostLikeRequest{} }
func (m *ListPostLikeRequest) String() string { return proto.CompactTextString(m) }
func (*ListPostLikeRequest) ProtoMessage()    {}
func (*ListPostLikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{5}
}
func (m *ListPostLikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPostLikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPostLikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPostLikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPostLikeRequest.Merge(m, src)
}
func (m *ListPostLikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPostLikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPostLikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPostLikeRequest proto.InternalMessageInfo

func (m *ListPostLikeRequest) GetPostId() int64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *ListPostLikeRequest) GetLastId() int64 {
	if m != nil {
		return m.LastId
	}
	return 0
}

func (m *ListPostLikeRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListPostLikeReply struct {
	Items   []*Like `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Count   int64   `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	HasMore bool    `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more"`
	LastId  string  `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id"`
}

func (m *ListPostLikeReply) Reset()         { *m = ListPostLikeReply{} }
func (m *ListPostLikeReply) String() string { return proto.CompactTextString(m) }
func (*ListPostLikeReply) ProtoMessage()    {}
func (*ListPostLikeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{6}
}
func (m *ListPostLikeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPostLikeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPostLikeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPostLikeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPostLikeReply.Merge(m, src)
}
func (m *ListPostLikeReply) XXX_Size() int {
	return m.Size()
}
func (m *ListPostLikeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPostLikeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListPostLikeReply proto.InternalMessageInfo

func (m *ListPostLikeReply) GetItems() []*Like {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListPostLikeReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListPostLikeReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ListPostLikeReply) GetLastId() string {
	if m != nil {
		return m.LastId
	}
	return ""
}

type CreateCommentLikeRequest struct {
	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CommentId int64 `protobuf:"varint,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (m *CreateCommentLikeRequest) Reset()         { *m = CreateCommentLikeRequest{} }
func (m *CreateCommentLikeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCommentLikeRequest) ProtoMessage()    {}
func (*CreateCommentLikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{7}
}
func (m *CreateCommentLikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCommentLikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCommentLikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCommentLikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentLikeRequest.Merge(m, src)
}
func (m *CreateCommentLikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCommentLikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentLikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentLikeRequest proto.InternalMessageInfo

func (m *CreateCommentLikeRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateCommentLikeRequest) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

type CreateCommentLikeReply struct {
}

func (m *CreateCommentLikeReply) Reset()         { *m = CreateCommentLikeReply{} }
func (m *CreateCommentLikeReply) String() string { return proto.CompactTextString(m) }
func (*CreateCommentLikeReply) ProtoMessage()    {}
func (*CreateCommentLikeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{8}
}
func (m *CreateCommentLikeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCommentLikeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCommentLikeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCommentLikeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentLikeReply.Merge(m, src)
}
func (m *CreateCommentLikeReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateCommentLikeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentLikeReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentLikeReply proto.InternalMessageInfo

type DeleteCommentLikeRequest struct {
	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CommentId int64 `protobuf:"varint,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (m *DeleteCommentLikeRequest) Reset()         { *m = DeleteCommentLikeRequest{} }
func (m *DeleteCommentLikeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCommentLikeRequest) ProtoMessage()    {}
func (*DeleteCommentLikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{9}
}
func (m *DeleteCommentLikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCommentLikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCommentLikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCommentLikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommentLikeRequest.Merge(m, src)
}
func (m *DeleteCommentLikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCommentLikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommentLikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommentLikeRequest proto.InternalMessageInfo

func (m *DeleteCommentLikeRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteCommentLikeRequest) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

type DeleteCommentLikeReply struct {
}

func (m *DeleteCommentLikeReply) Reset()         { *m = DeleteCommentLikeReply{} }
func (m *DeleteCommentLikeReply) String() string { return proto.CompactTextString(m) }
func (*DeleteCommentLikeReply) ProtoMessage()    {}
func (*DeleteCommentLikeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{10}
}
func (m *DeleteCommentLikeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCommentLikeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCommentLikeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCommentLikeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommentLikeReply.Merge(m, src)
}
func (m *DeleteCommentLikeReply) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCommentLikeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommentLikeReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommentLikeReply proto.InternalMessageInfo

type ListCommentLikeRequest struct {
	// @gotags: form:"comment_id"
	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty" form:"comment_id"`
	// @gotags: form:"last_id"
	LastId int64 `protobuf:"varint,2,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty" form:"last_id"`
	// @gotags: form:"limit"
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" form:"limit"`
}

func (m *ListCommentLikeRequest) Reset()         { *m = ListCommentLikeRequest{} }
func (m *ListCommentLikeRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommentLikeRequest) ProtoMessage()    {}
func (*ListCommentLikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{11}
}
func (m *ListCommentLikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCommentLikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCommentLikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCommentLikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentLikeRequest.Merge(m, src)
}
func (m *ListCommentLikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCommentLikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentLikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentLikeRequest proto.InternalMessageInfo

func (m *ListCommentLikeRequest) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

func (m *ListCommentLikeRequest) GetLastId() int64 {
	if m != nil {
		return m.LastId
	}
	return 0
}

func (m *ListCommentLikeRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListCommentLikeReply struct {
	Items   []*Like `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Count   int64   `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	HasMore bool    `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more"`
	LastId  string  `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id"`
}

func (m *ListCommentLikeReply) Reset()         { *m = ListCommentLikeReply{} }
func (m *ListCommentLikeReply) String() string { return proto.CompactTextString(m) }
func (*ListCommentLikeReply) ProtoMessage()    {}
func (*ListCommentLikeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_88ba513ec2b39f34, []int{12}
}
func (m *ListCommentLikeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCommentLikeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCommentLikeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCommentLikeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentLikeReply.Merge(m, src)
}
func (m *ListCommentLikeReply) XXX_Size() int {
	return m.Size()
}
func (m *ListCommentLikeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentLikeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentLikeReply proto.InternalMessageInfo

func (m *ListCommentLikeReply) GetItems() []*Like {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListCommentLikeReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListCommentLikeReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ListCommentLikeReply) GetLastId() string {
	if m != nil {
		return m.LastId
	}
	return ""
}

func init() {
	proto.RegisterType((*Like)(nil), "api.micro.moment.v1.Like")
	proto.RegisterType((*CreatePostLikeRequest)(nil), "api.micro.moment.v1.CreatePostLikeRequest")
	proto.RegisterType((*CreatePostLikeReply)(nil), "api.micro.moment.v1.CreatePostLikeReply")
	proto.RegisterType((*DeletePostLikeRequest)(nil), "api.micro.moment.v1.DeletePostLikeRequest")
	proto.RegisterType((*DeletePostLikeReply)(nil), "api.micro.moment.v1.DeletePostLikeReply")
	proto.RegisterType((*ListPostLikeRequest)(nil), "api.micro.moment.v1.ListPostLikeRequest")
	proto.RegisterType((*ListPostLikeReply)(nil), "api.micro.moment.v1.ListPostLikeReply")
	proto.RegisterType((*CreateCommentLikeRequest)(nil), "api.micro.moment.v1.CreateCommentLikeRequest")
	proto.RegisterType((*CreateCommentLikeReply)(nil), "api.micro.moment.v1.CreateCommentLikeReply")
	proto.RegisterType((*DeleteCommentLikeRequest)(nil), "api.micro.moment.v1.DeleteCommentLikeRequest")
	proto.RegisterType((*DeleteCommentLikeReply)(nil), "api.micro.moment.v1.DeleteCommentLikeReply")
	proto.RegisterType((*ListCommentLikeRequest)(nil), "api.micro.moment.v1.ListCommentLikeRequest")
	proto.RegisterType((*ListCommentLikeReply)(nil), "api.micro.moment.v1.ListCommentLikeReply")
}

func init() { proto.RegisterFile("api/micro/moment/v1/like.proto", fileDescriptor_88ba513ec2b39f34) }

var fileDescriptor_88ba513ec2b39f34 = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0x65, 0x02, 0xe1, 0xe3, 0x06, 0x05, 0x65, 0x12, 0xc0, 0x44, 0x3c, 0x27, 0xb2, 0x9e, 0xde,
	0x73, 0x41, 0xd8, 0x0a, 0x5d, 0x95, 0xee, 0x42, 0x37, 0x91, 0xa8, 0x84, 0x5c, 0x75, 0x53, 0xa9,
	0x42, 0x26, 0x1e, 0xc2, 0x14, 0x3b, 0x93, 0x7a, 0x9c, 0x48, 0x2c, 0x5b, 0xb5, 0xcb, 0x4a, 0x48,
	0xfd, 0x3f, 0xad, 0xd4, 0x55, 0x97, 0x48, 0xdd, 0x74, 0x85, 0x2a, 0xe8, 0x8a, 0x5f, 0x51, 0xcd,
	0x0c, 0x21, 0x38, 0xb6, 0xab, 0x54, 0x62, 0xd3, 0x95, 0x33, 0x73, 0xcf, 0x9c, 0x7b, 0x72, 0xef,
	0x9c, 0x6b, 0x83, 0xee, 0xf6, 0xa8, 0x1d, 0xd0, 0x76, 0xc8, 0xec, 0x80, 0x05, 0xa4, 0x1b, 0xd9,
	0x83, 0x86, 0xed, 0xd3, 0x13, 0x62, 0xf5, 0x42, 0x16, 0x31, 0x5c, 0x76, 0x7b, 0xd4, 0x92, 0x71,
	0x4b, 0xc5, 0xad, 0x41, 0xa3, 0xba, 0xde, 0x61, 0xac, 0xe3, 0x13, 0x5b, 0x9c, 0x75, 0xbb, 0x5d,
	0x16, 0xb9, 0x11, 0x65, 0x5d, 0xae, 0x8e, 0x54, 0xd7, 0x47, 0x94, 0x7d, 0x4e, 0x42, 0x41, 0x28,
	0x9e, 0x37, 0x51, 0xad, 0xc3, 0x3a, 0xcc, 0x96, 0xbf, 0x0f, 0xfb, 0x47, 0xb6, 0x58, 0xa9, 0x88,
	0xb1, 0x0b, 0x33, 0x7b, 0xf4, 0x84, 0xe0, 0x22, 0xe4, 0xa8, 0xa7, 0xa1, 0x3a, 0x32, 0xa7, 0x9d,
	0x1c, 0xf5, 0xf0, 0x26, 0xcc, 0x88, 0xf3, 0x5a, 0xae, 0x8e, 0xcc, 0xc2, 0xf6, 0xaa, 0x35, 0x52,
	0x24, 0x69, 0x07, 0x0d, 0xeb, 0x39, 0x27, 0xa1, 0x23, 0x41, 0x46, 0x0b, 0x96, 0x77, 0x43, 0xe2,
	0x46, 0x64, 0x9f, 0xf1, 0x48, 0xd0, 0x39, 0xe4, 0x75, 0x9f, 0xf0, 0x08, 0xaf, 0xc2, 0x9c, 0x00,
	0x1c, 0xdc, 0x52, 0xcf, 0x8a, 0x65, 0xcb, 0x13, 0x81, 0x1e, 0xe3, 0x91, 0x08, 0xe4, 0x54, 0x40,
	0x2c, 0x5b, 0x9e, 0xb1, 0x0c, 0xe5, 0x71, 0xaa, 0x9e, 0x7f, 0x2a, 0x32, 0x3c, 0x21, 0x3e, 0xb9,
	0xa7, 0x0c, 0xe3, 0x54, 0x22, 0xc3, 0x4b, 0x28, 0xef, 0x51, 0x1e, 0xa5, 0xf0, 0x0f, 0x69, 0xd0,
	0x5d, 0x1a, 0x11, 0xf0, 0xdd, 0x18, 0xbf, 0x58, 0xb6, 0x3c, 0x5c, 0x81, 0xbc, 0x4f, 0x03, 0x1a,
	0x69, 0xd3, 0x75, 0x64, 0xe6, 0x1d, 0xb5, 0x30, 0x3e, 0x23, 0x28, 0xc5, 0xf9, 0x7b, 0xfe, 0x29,
	0xde, 0x81, 0x3c, 0x8d, 0x48, 0xc0, 0x35, 0x54, 0x9f, 0x36, 0x0b, 0xdb, 0x6b, 0x56, 0x4a, 0xe3,
	0x2d, 0x01, 0x6f, 0x2e, 0x5c, 0x5f, 0xd4, 0x14, 0xd6, 0x51, 0x0f, 0x5c, 0x83, 0x7c, 0x9b, 0xf5,
	0xbb, 0x91, 0x4a, 0xaf, 0x00, 0x72, 0xc3, 0x51, 0x0f, 0xfc, 0x3f, 0xcc, 0x1f, 0xbb, 0xfc, 0x20,
	0x60, 0x21, 0x91, 0x5a, 0xe6, 0x9b, 0x8b, 0xd7, 0x17, 0xb5, 0xdb, 0x3d, 0x67, 0xee, 0xd8, 0xe5,
	0x4f, 0x59, 0x48, 0xf0, 0xbf, 0xa3, 0xbf, 0x32, 0x53, 0x47, 0xe6, 0x42, 0xb3, 0x70, 0x7d, 0x51,
	0x1b, 0x6e, 0x0d, 0xff, 0x97, 0xe1, 0x80, 0xa6, 0x3a, 0xb3, 0xcb, 0x02, 0x21, 0x6d, 0xa2, 0x2e,
	0xfc, 0x03, 0xd0, 0x56, 0xf0, 0x51, 0xa1, 0x16, 0x6e, 0x76, 0x5a, 0x9e, 0xa1, 0xc1, 0x4a, 0x0a,
	0xa7, 0x68, 0x87, 0x03, 0x9a, 0xea, 0xd2, 0xfd, 0x66, 0x4b, 0xe1, 0x14, 0xd9, 0x8e, 0x60, 0x45,
	0x34, 0x27, 0x25, 0x57, 0x9c, 0x12, 0x8d, 0x51, 0xfe, 0xe9, 0x2d, 0xf8, 0x82, 0xa0, 0x92, 0x48,
	0xf4, 0x97, 0x5d, 0x84, 0xed, 0x4f, 0xb3, 0x50, 0x10, 0x52, 0x9e, 0x91, 0x70, 0x40, 0xdb, 0x04,
	0xbf, 0x41, 0x50, 0x8c, 0x7b, 0x16, 0x6f, 0xa4, 0xea, 0x4f, 0x9d, 0x11, 0x55, 0x73, 0x22, 0xac,
	0xe8, 0xd2, 0xda, 0xdb, 0x6f, 0x3f, 0x3f, 0xe6, 0xca, 0x46, 0x51, 0x4c, 0x37, 0x61, 0x43, 0x2e,
	0x87, 0xe6, 0x0e, 0xda, 0xc0, 0xef, 0x10, 0x14, 0xe3, 0xae, 0xce, 0xd0, 0x90, 0x3a, 0x45, 0x32,
	0x34, 0xa4, 0x8d, 0x89, 0x75, 0xa9, 0x61, 0xc5, 0x28, 0x8d, 0x34, 0x78, 0x94, 0x0f, 0x65, 0x9c,
	0xc2, 0xe2, 0x5d, 0x93, 0x63, 0x33, 0xa3, 0x8f, 0x89, 0x39, 0x53, 0xfd, 0x6f, 0x02, 0xa4, 0xc8,
	0xbf, 0x2a, 0xf3, 0x97, 0xf0, 0x52, 0xbc, 0x06, 0x1c, 0x7f, 0x40, 0x50, 0x4a, 0x78, 0x09, 0x6f,
	0xfd, 0xa6, 0xb8, 0xc9, 0xdb, 0x5e, 0xdd, 0x9c, 0x14, 0x9e, 0x28, 0xc5, 0x8d, 0x25, 0x46, 0x1d,
	0x39, 0x43, 0x50, 0x4a, 0xb8, 0x2d, 0x43, 0x4f, 0x96, 0xd3, 0x33, 0xf4, 0x64, 0x98, 0xb8, 0x26,
	0xf5, 0xac, 0x19, 0x95, 0x98, 0x9e, 0x3b, 0xdd, 0x79, 0x8f, 0x60, 0x69, 0xcc, 0x7d, 0x78, 0x33,
	0xb3, 0xee, 0x29, 0x72, 0x1e, 0x4c, 0x06, 0x16, 0x62, 0xaa, 0x52, 0x4c, 0x05, 0xe3, 0x44, 0x71,
	0x78, 0xf3, 0xd5, 0xd7, 0x4b, 0x1d, 0x9d, 0x5f, 0xea, 0xe8, 0xc7, 0xa5, 0x8e, 0xce, 0xae, 0xf4,
	0xa9, 0xf3, 0x2b, 0x7d, 0xea, 0xfb, 0x95, 0x3e, 0x05, 0x69, 0x2f, 0xfe, 0x7d, 0xf4, 0xe2, 0x51,
	0x87, 0x46, 0xc7, 0xfd, 0x43, 0xab, 0xcd, 0x02, 0xbb, 0xc3, 0xb6, 0x24, 0x80, 0x2b, 0xf7, 0xd9,
	0xb4, 0xcb, 0xb7, 0xe4, 0x27, 0x41, 0xf2, 0x93, 0xe2, 0xf1, 0xa0, 0x71, 0x38, 0x2b, 0x5f, 0xf3,
	0x0f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xdb, 0x8a, 0x9a, 0x73, 0x08, 0x00, 0x00,
}

func (m *Like) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Like) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Like) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLike(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePostLikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePostLikeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePostLikeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PostId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePostLikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePostLikeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePostLikeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeletePostLikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePostLikeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePostLikeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PostId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeletePostLikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePostLikeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePostLikeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListPostLikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPostLikeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPostLikeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.LastId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.LastId))
		i--
		dAtA[i] = 0x10
	}
	if m.PostId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListPostLikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPostLikeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPostLikeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastId) > 0 {
		i -= len(m.LastId)
		copy(dAtA[i:], m.LastId)
		i = encodeVarintLike(dAtA, i, uint64(len(m.LastId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLike(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateCommentLikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCommentLikeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentLikeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommentId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateCommentLikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCommentLikeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentLikeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteCommentLikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentLikeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCommentLikeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommentId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCommentLikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentLikeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCommentLikeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListCommentLikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCommentLikeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCommentLikeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.LastId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.LastId))
		i--
		dAtA[i] = 0x10
	}
	if m.CommentId != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.CommentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListCommentLikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCommentLikeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCommentLikeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastId) > 0 {
		i -= len(m.LastId)
		copy(dAtA[i:], m.LastId)
		i = encodeVarintLike(dAtA, i, uint64(len(m.LastId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintLike(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLike(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLike(dAtA []byte, offset int, v uint64) int {
	offset -= sovLike(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Like) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLike(uint64(m.Id))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovLike(uint64(l))
	}
	return n
}

func (m *CreatePostLikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovLike(uint64(m.UserId))
	}
	if m.PostId != 0 {
		n += 1 + sovLike(uint64(m.PostId))
	}
	return n
}

func (m *CreatePostLikeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeletePostLikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovLike(uint64(m.UserId))
	}
	if m.PostId != 0 {
		n += 1 + sovLike(uint64(m.PostId))
	}
	return n
}

func (m *DeletePostLikeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListPostLikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PostId != 0 {
		n += 1 + sovLike(uint64(m.PostId))
	}
	if m.LastId != 0 {
		n += 1 + sovLike(uint64(m.LastId))
	}
	if m.Limit != 0 {
		n += 1 + sovLike(uint64(m.Limit))
	}
	return n
}

func (m *ListPostLikeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovLike(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovLike(uint64(m.Count))
	}
	if m.HasMore {
		n += 2
	}
	l = len(m.LastId)
	if l > 0 {
		n += 1 + l + sovLike(uint64(l))
	}
	return n
}

func (m *CreateCommentLikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovLike(uint64(m.UserId))
	}
	if m.CommentId != 0 {
		n += 1 + sovLike(uint64(m.CommentId))
	}
	return n
}

func (m *CreateCommentLikeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteCommentLikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovLike(uint64(m.UserId))
	}
	if m.CommentId != 0 {
		n += 1 + sovLike(uint64(m.CommentId))
	}
	return n
}

func (m *DeleteCommentLikeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListCommentLikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommentId != 0 {
		n += 1 + sovLike(uint64(m.CommentId))
	}
	if m.LastId != 0 {
		n += 1 + sovLike(uint64(m.LastId))
	}
	if m.Limit != 0 {
		n += 1 + sovLike(uint64(m.Limit))
	}
	return n
}

func (m *ListCommentLikeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovLike(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovLike(uint64(m.Count))
	}
	if m.HasMore {
		n += 2
	}
	l = len(m.LastId)
	if l > 0 {
		n += 1 + l + sovLike(uint64(l))
	}
	return n
}

func sovLike(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLike(x uint64) (n int) {
	return sovLike(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Like) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Like: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Like: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &v1.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePostLikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePostLikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePostLikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePostLikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePostLikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePostLikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePostLikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePostLikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePostLikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePostLikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePostLikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePostLikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPostLikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPostLikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPostLikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			m.LastId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPostLikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPostLikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPostLikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Like{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCommentLikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCommentLikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCommentLikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCommentLikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCommentLikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCommentLikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentLikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentLikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentLikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentLikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentLikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentLikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCommentLikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCommentLikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCommentLikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			m.CommentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			m.LastId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCommentLikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCommentLikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCommentLikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Like{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLike(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLike
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLike
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLike
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLike
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLike        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLike          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLike = fmt.Errorf("proto: unexpected end of group")
)
