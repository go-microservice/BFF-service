// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/micro/moment/v1/post.proto

package v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	v1 "github.com/go-microservice/ins-api/api/micro/user/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Content struct {
	Text   string       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Images []*PostImage `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	Video  *Video       `protobuf:"bytes,3,opt,name=video,proto3" json:"video,omitempty"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{0}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return m.Size()
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Content) GetImages() []*PostImage {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Content) GetVideo() *Video {
	if m != nil {
		return m.Video
	}
	return nil
}

type PostImage struct {
	ImageKey  string `protobuf:"bytes,1,opt,name=image_key,json=imageKey,proto3" json:"image_key,omitempty"`
	ImageUrl  string `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	ImageType string `protobuf:"bytes,3,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	Width     int32  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height    int32  `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *PostImage) Reset()         { *m = PostImage{} }
func (m *PostImage) String() string { return proto.CompactTextString(m) }
func (*PostImage) ProtoMessage()    {}
func (*PostImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{1}
}
func (m *PostImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostImage.Merge(m, src)
}
func (m *PostImage) XXX_Size() int {
	return m.Size()
}
func (m *PostImage) XXX_DiscardUnknown() {
	xxx_messageInfo_PostImage.DiscardUnknown(m)
}

var xxx_messageInfo_PostImage proto.InternalMessageInfo

func (m *PostImage) GetImageKey() string {
	if m != nil {
		return m.ImageKey
	}
	return ""
}

func (m *PostImage) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *PostImage) GetImageType() string {
	if m != nil {
		return m.ImageType
	}
	return ""
}

func (m *PostImage) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *PostImage) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Video struct {
	VideoKey string  `protobuf:"bytes,1,opt,name=video_key,json=videoKey,proto3" json:"video_key,omitempty"`
	VideoUrl string  `protobuf:"bytes,2,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	CoverKey string  `protobuf:"bytes,3,opt,name=cover_key,json=coverKey,proto3" json:"cover_key,omitempty"`
	CoverUrl string  `protobuf:"bytes,4,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	Duration float32 `protobuf:"fixed32,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Width    int32   `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
	Height   int32   `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{2}
}
func (m *Video) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Video.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(m, src)
}
func (m *Video) XXX_Size() int {
	return m.Size()
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetVideoKey() string {
	if m != nil {
		return m.VideoKey
	}
	return ""
}

func (m *Video) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

func (m *Video) GetCoverKey() string {
	if m != nil {
		return m.CoverKey
	}
	return ""
}

func (m *Video) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *Video) GetDuration() float32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Video) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Video) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Post struct {
	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	PostType     int32    `protobuf:"varint,2,opt,name=post_type,json=postType,proto3" json:"post_type"`
	User         *v1.User `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Title        string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	Content      *Content `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
	ViewCount    int64    `protobuf:"varint,6,opt,name=view_count,json=viewCount,proto3" json:"view_count"`
	LikeCount    int64    `protobuf:"varint,7,opt,name=like_count,json=likeCount,proto3" json:"like_count"`
	CommentCount int64    `protobuf:"varint,8,opt,name=comment_count,json=commentCount,proto3" json:"comment_count"`
	CollectCount int64    `protobuf:"varint,9,opt,name=collect_count,json=collectCount,proto3" json:"collect_count"`
	ShareCount   int64    `protobuf:"varint,10,opt,name=share_count,json=shareCount,proto3" json:"share_count"`
	Longitude    float32  `protobuf:"fixed32,11,opt,name=longitude,proto3" json:"longitude"`
	Latitude     float32  `protobuf:"fixed32,12,opt,name=latitude,proto3" json:"latitude"`
	Position     float32  `protobuf:"fixed32,13,opt,name=position,proto3" json:"position"`
	CreatedAt    int64    `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	IsLike       int32    `protobuf:"varint,15,opt,name=is_like,json=isLike,proto3" json:"is_like"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{3}
}
func (m *Post) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Post.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return m.Size()
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Post) GetPostType() int32 {
	if m != nil {
		return m.PostType
	}
	return 0
}

func (m *Post) GetUser() *v1.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Post) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Post) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Post) GetViewCount() int64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *Post) GetLikeCount() int64 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *Post) GetCommentCount() int64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *Post) GetCollectCount() int64 {
	if m != nil {
		return m.CollectCount
	}
	return 0
}

func (m *Post) GetShareCount() int64 {
	if m != nil {
		return m.ShareCount
	}
	return 0
}

func (m *Post) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Post) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Post) GetPosition() float32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Post) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Post) GetIsLike() int32 {
	if m != nil {
		return m.IsLike
	}
	return 0
}

type PostImageRequest struct {
	ImageKey  string `protobuf:"bytes,1,opt,name=image_key,json=imageKey,proto3" json:"image_key,omitempty"`
	ImageType string `protobuf:"bytes,2,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	Width     int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height    int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *PostImageRequest) Reset()         { *m = PostImageRequest{} }
func (m *PostImageRequest) String() string { return proto.CompactTextString(m) }
func (*PostImageRequest) ProtoMessage()    {}
func (*PostImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{4}
}
func (m *PostImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostImageRequest.Merge(m, src)
}
func (m *PostImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostImageRequest proto.InternalMessageInfo

func (m *PostImageRequest) GetImageKey() string {
	if m != nil {
		return m.ImageKey
	}
	return ""
}

func (m *PostImageRequest) GetImageType() string {
	if m != nil {
		return m.ImageType
	}
	return ""
}

func (m *PostImageRequest) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *PostImageRequest) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type CreatePostRequest struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text   string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// json格式：[{"image_key":"/abc/a.jpg","image_type":"jpg","width":200,"height":200}]
	Images        []*PostImageRequest `protobuf:"bytes,4,rep,name=images,proto3" json:"images,omitempty"`
	VideoKey      string              `protobuf:"bytes,5,opt,name=video_key,json=videoKey,proto3" json:"video_key,omitempty"`
	VideoDuration float32             `protobuf:"fixed32,6,opt,name=video_duration,json=videoDuration,proto3" json:"video_duration,omitempty"`
	CoverKey      string              `protobuf:"bytes,7,opt,name=cover_key,json=coverKey,proto3" json:"cover_key,omitempty"`
	CoverWidth    int32               `protobuf:"varint,8,opt,name=cover_width,json=coverWidth,proto3" json:"cover_width,omitempty"`
	CoverHeight   int32               `protobuf:"varint,9,opt,name=cover_height,json=coverHeight,proto3" json:"cover_height,omitempty"`
	Longitude     float32             `protobuf:"fixed32,10,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude      float32             `protobuf:"fixed32,11,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Position      string              `protobuf:"bytes,12,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *CreatePostRequest) Reset()         { *m = CreatePostRequest{} }
func (m *CreatePostRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePostRequest) ProtoMessage()    {}
func (*CreatePostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{5}
}
func (m *CreatePostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePostRequest.Merge(m, src)
}
func (m *CreatePostRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePostRequest proto.InternalMessageInfo

func (m *CreatePostRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreatePostRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreatePostRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CreatePostRequest) GetImages() []*PostImageRequest {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *CreatePostRequest) GetVideoKey() string {
	if m != nil {
		return m.VideoKey
	}
	return ""
}

func (m *CreatePostRequest) GetVideoDuration() float32 {
	if m != nil {
		return m.VideoDuration
	}
	return 0
}

func (m *CreatePostRequest) GetCoverKey() string {
	if m != nil {
		return m.CoverKey
	}
	return ""
}

func (m *CreatePostRequest) GetCoverWidth() int32 {
	if m != nil {
		return m.CoverWidth
	}
	return 0
}

func (m *CreatePostRequest) GetCoverHeight() int32 {
	if m != nil {
		return m.CoverHeight
	}
	return 0
}

func (m *CreatePostRequest) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *CreatePostRequest) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *CreatePostRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type CreatePostReply struct {
	Post *Post `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
}

func (m *CreatePostReply) Reset()         { *m = CreatePostReply{} }
func (m *CreatePostReply) String() string { return proto.CompactTextString(m) }
func (*CreatePostReply) ProtoMessage()    {}
func (*CreatePostReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{6}
}
func (m *CreatePostReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePostReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePostReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePostReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePostReply.Merge(m, src)
}
func (m *CreatePostReply) XXX_Size() int {
	return m.Size()
}
func (m *CreatePostReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePostReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePostReply proto.InternalMessageInfo

func (m *CreatePostReply) GetPost() *Post {
	if m != nil {
		return m.Post
	}
	return nil
}

type UpdatePostRequest struct {
}

func (m *UpdatePostRequest) Reset()         { *m = UpdatePostRequest{} }
func (m *UpdatePostRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePostRequest) ProtoMessage()    {}
func (*UpdatePostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{7}
}
func (m *UpdatePostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePostRequest.Merge(m, src)
}
func (m *UpdatePostRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePostRequest proto.InternalMessageInfo

type UpdatePostReply struct {
}

func (m *UpdatePostReply) Reset()         { *m = UpdatePostReply{} }
func (m *UpdatePostReply) String() string { return proto.CompactTextString(m) }
func (*UpdatePostReply) ProtoMessage()    {}
func (*UpdatePostReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{8}
}
func (m *UpdatePostReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePostReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePostReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePostReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePostReply.Merge(m, src)
}
func (m *UpdatePostReply) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePostReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePostReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePostReply proto.InternalMessageInfo

type DeletePostRequest struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DelFlag int32  `protobuf:"varint,2,opt,name=del_flag,json=delFlag,proto3" json:"del_flag,omitempty"`
}

func (m *DeletePostRequest) Reset()         { *m = DeletePostRequest{} }
func (m *DeletePostRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePostRequest) ProtoMessage()    {}
func (*DeletePostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{9}
}
func (m *DeletePostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePostRequest.Merge(m, src)
}
func (m *DeletePostRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePostRequest proto.InternalMessageInfo

func (m *DeletePostRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeletePostRequest) GetDelFlag() int32 {
	if m != nil {
		return m.DelFlag
	}
	return 0
}

type DeletePostReply struct {
}

func (m *DeletePostReply) Reset()         { *m = DeletePostReply{} }
func (m *DeletePostReply) String() string { return proto.CompactTextString(m) }
func (*DeletePostReply) ProtoMessage()    {}
func (*DeletePostReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{10}
}
func (m *DeletePostReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePostReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePostReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePostReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePostReply.Merge(m, src)
}
func (m *DeletePostReply) XXX_Size() int {
	return m.Size()
}
func (m *DeletePostReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePostReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePostReply proto.InternalMessageInfo

type GetPostRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" uri:"id"`
}

func (m *GetPostRequest) Reset()         { *m = GetPostRequest{} }
func (m *GetPostRequest) String() string { return proto.CompactTextString(m) }
func (*GetPostRequest) ProtoMessage()    {}
func (*GetPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{11}
}
func (m *GetPostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPostRequest.Merge(m, src)
}
func (m *GetPostRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPostRequest proto.InternalMessageInfo

func (m *GetPostRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPostReply struct {
	Post *Post `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
}

func (m *GetPostReply) Reset()         { *m = GetPostReply{} }
func (m *GetPostReply) String() string { return proto.CompactTextString(m) }
func (*GetPostReply) ProtoMessage()    {}
func (*GetPostReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{12}
}
func (m *GetPostReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPostReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPostReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPostReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPostReply.Merge(m, src)
}
func (m *GetPostReply) XXX_Size() int {
	return m.Size()
}
func (m *GetPostReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPostReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetPostReply proto.InternalMessageInfo

func (m *GetPostReply) GetPost() *Post {
	if m != nil {
		return m.Post
	}
	return nil
}

type ListPostRequest struct {
	LastId int64 `protobuf:"varint,1,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty" form:"last_id"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" form:"limit"`
}

func (m *ListPostRequest) Reset()         { *m = ListPostRequest{} }
func (m *ListPostRequest) String() string { return proto.CompactTextString(m) }
func (*ListPostRequest) ProtoMessage()    {}
func (*ListPostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{13}
}
func (m *ListPostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPostRequest.Merge(m, src)
}
func (m *ListPostRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPostRequest proto.InternalMessageInfo

func (m *ListPostRequest) GetLastId() int64 {
	if m != nil {
		return m.LastId
	}
	return 0
}

func (m *ListPostRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListPostReply struct {
	Items   []*Post `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Count   int64   `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	HasMore bool    `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more"`
	LastId  string  `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id"`
}

func (m *ListPostReply) Reset()         { *m = ListPostReply{} }
func (m *ListPostReply) String() string { return proto.CompactTextString(m) }
func (*ListPostReply) ProtoMessage()    {}
func (*ListPostReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f444114db32d2157, []int{14}
}
func (m *ListPostReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPostReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPostReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPostReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPostReply.Merge(m, src)
}
func (m *ListPostReply) XXX_Size() int {
	return m.Size()
}
func (m *ListPostReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPostReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListPostReply proto.InternalMessageInfo

func (m *ListPostReply) GetItems() []*Post {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListPostReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListPostReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ListPostReply) GetLastId() string {
	if m != nil {
		return m.LastId
	}
	return ""
}

func init() {
	proto.RegisterType((*Content)(nil), "api.micro.moment.v1.Content")
	proto.RegisterType((*PostImage)(nil), "api.micro.moment.v1.PostImage")
	proto.RegisterType((*Video)(nil), "api.micro.moment.v1.Video")
	proto.RegisterType((*Post)(nil), "api.micro.moment.v1.Post")
	proto.RegisterType((*PostImageRequest)(nil), "api.micro.moment.v1.PostImageRequest")
	proto.RegisterType((*CreatePostRequest)(nil), "api.micro.moment.v1.CreatePostRequest")
	proto.RegisterType((*CreatePostReply)(nil), "api.micro.moment.v1.CreatePostReply")
	proto.RegisterType((*UpdatePostRequest)(nil), "api.micro.moment.v1.UpdatePostRequest")
	proto.RegisterType((*UpdatePostReply)(nil), "api.micro.moment.v1.UpdatePostReply")
	proto.RegisterType((*DeletePostRequest)(nil), "api.micro.moment.v1.DeletePostRequest")
	proto.RegisterType((*DeletePostReply)(nil), "api.micro.moment.v1.DeletePostReply")
	proto.RegisterType((*GetPostRequest)(nil), "api.micro.moment.v1.GetPostRequest")
	proto.RegisterType((*GetPostReply)(nil), "api.micro.moment.v1.GetPostReply")
	proto.RegisterType((*ListPostRequest)(nil), "api.micro.moment.v1.ListPostRequest")
	proto.RegisterType((*ListPostReply)(nil), "api.micro.moment.v1.ListPostReply")
}

func init() { proto.RegisterFile("api/micro/moment/v1/post.proto", fileDescriptor_f444114db32d2157) }

var fileDescriptor_f444114db32d2157 = []byte{
	// 1303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xef, 0xfa, 0xf7, 0x3e, 0x3b, 0x4e, 0x32, 0xed, 0xb7, 0xdd, 0xba, 0xf9, 0x7a, 0xd3, 0xa5,
	0x2d, 0x51, 0xab, 0xd8, 0x4d, 0x90, 0x2a, 0x11, 0x54, 0x04, 0x4e, 0x05, 0xad, 0x28, 0x52, 0x35,
	0x50, 0x90, 0xb8, 0x58, 0x5b, 0xef, 0xc4, 0x1e, 0xba, 0xf6, 0x98, 0xdd, 0xb1, 0x4b, 0x04, 0x5c,
	0xb8, 0x70, 0xad, 0xe0, 0x4f, 0x81, 0x1b, 0x67, 0x24, 0x8e, 0x95, 0xb8, 0x70, 0xb2, 0x50, 0xcb,
	0xc9, 0xc7, 0xfe, 0x05, 0x68, 0xde, 0xec, 0x2f, 0x27, 0x76, 0x2b, 0x21, 0x4e, 0x9e, 0x79, 0xef,
	0xf3, 0xe6, 0xf3, 0x66, 0xe6, 0xb3, 0x9f, 0xf5, 0x42, 0xd3, 0x1d, 0xf3, 0xf6, 0x90, 0xf7, 0x02,
	0xd1, 0x1e, 0x8a, 0x21, 0x1b, 0xc9, 0xf6, 0x74, 0xaf, 0x3d, 0x16, 0xa1, 0x6c, 0x8d, 0x03, 0x21,
	0x05, 0x39, 0xeb, 0x8e, 0x79, 0x0b, 0xf3, 0x2d, 0x9d, 0x6f, 0x4d, 0xf7, 0x1a, 0x5b, 0x7d, 0x21,
	0xfa, 0x3e, 0x6b, 0xab, 0x5a, 0x77, 0x34, 0x12, 0xd2, 0x95, 0x5c, 0x8c, 0x42, 0x5d, 0xd2, 0xd8,
	0x4a, 0x97, 0x9c, 0x84, 0x2c, 0x50, 0x0b, 0xaa, 0xdf, 0x28, 0x6b, 0xf5, 0x45, 0x5f, 0xb4, 0x71,
	0xfc, 0x68, 0x72, 0xd4, 0x56, 0x33, 0x9d, 0x71, 0x7e, 0x30, 0xa0, 0x7c, 0x28, 0x46, 0x92, 0x8d,
	0x24, 0x21, 0x50, 0x90, 0xec, 0x6b, 0x69, 0x19, 0xdb, 0xc6, 0x8e, 0x49, 0x71, 0x4c, 0x6e, 0x41,
	0x89, 0x0f, 0xdd, 0x3e, 0x0b, 0xad, 0xdc, 0x76, 0x7e, 0xa7, 0xba, 0xdf, 0x6c, 0x2d, 0xe9, 0xad,
	0xf5, 0x40, 0x84, 0xf2, 0x9e, 0x82, 0xd1, 0x08, 0x4d, 0x6e, 0x42, 0x71, 0xca, 0x3d, 0x26, 0xac,
	0xfc, 0xb6, 0xb1, 0x53, 0xdd, 0x6f, 0x2c, 0x2d, 0xfb, 0x4c, 0x21, 0xa8, 0x06, 0x3a, 0x3f, 0x1a,
	0x60, 0x26, 0xeb, 0x90, 0x4b, 0x60, 0xe2, 0x4a, 0xdd, 0xc7, 0xec, 0x38, 0x6a, 0xa8, 0x82, 0x81,
	0x8f, 0xd8, 0x71, 0x9a, 0x9c, 0x04, 0xbe, 0x95, 0xcb, 0x24, 0x1f, 0x06, 0x3e, 0xf9, 0x3f, 0x80,
	0x4e, 0xca, 0xe3, 0x31, 0x43, 0x7a, 0x93, 0x6a, 0xf8, 0xa7, 0xc7, 0x63, 0x46, 0xce, 0x41, 0xf1,
	0x09, 0xf7, 0xe4, 0xc0, 0x2a, 0x6c, 0x1b, 0x3b, 0x45, 0xaa, 0x27, 0xe4, 0x3c, 0x94, 0x06, 0x8c,
	0xf7, 0x07, 0xd2, 0x2a, 0x62, 0x38, 0x9a, 0x39, 0xbf, 0x19, 0x50, 0xc4, 0x2e, 0x15, 0x27, 0xf6,
	0x99, 0x6d, 0x08, 0x03, 0x51, 0x43, 0x3a, 0x99, 0x69, 0x08, 0x03, 0xaa, 0xa1, 0x4b, 0x60, 0xf6,
	0xc4, 0x94, 0x05, 0x58, 0xa9, 0xfb, 0xa9, 0x60, 0x20, 0xaa, 0xd4, 0x49, 0x55, 0x59, 0xc8, 0x24,
	0x55, 0x65, 0x03, 0x2a, 0xde, 0x24, 0xc0, 0x7b, 0xc6, 0xbe, 0x72, 0x34, 0x99, 0xa7, 0xfb, 0x28,
	0x2d, 0xdf, 0x47, 0x79, 0x61, 0x1f, 0x3f, 0x17, 0xa1, 0xa0, 0x0e, 0x97, 0x9c, 0x87, 0x1c, 0xf7,
	0x74, 0xff, 0x9d, 0xd2, 0x7c, 0x66, 0xe7, 0xb8, 0x47, 0x73, 0xdc, 0x23, 0xd7, 0xc1, 0x54, 0x02,
	0xd4, 0x87, 0xa6, 0x76, 0x50, 0xec, 0xac, 0xcd, 0x67, 0x76, 0x1a, 0xa4, 0x15, 0x35, 0xc4, 0x23,
	0xbc, 0x01, 0x05, 0xa5, 0xad, 0xe8, 0x6a, 0x2f, 0x64, 0xae, 0x16, 0x25, 0x37, 0xdd, 0x6b, 0x3d,
	0x0c, 0x59, 0x40, 0x11, 0x44, 0x6c, 0x28, 0x4a, 0x2e, 0x7d, 0xa6, 0x37, 0xd7, 0x31, 0xe7, 0x33,
	0x5b, 0x07, 0xa8, 0xfe, 0x21, 0x87, 0x50, 0xee, 0x69, 0x01, 0xe2, 0x1e, 0xab, 0xfb, 0x5b, 0x4b,
	0xb5, 0x12, 0x89, 0xb4, 0x53, 0x9d, 0xcf, 0xec, 0xb8, 0x80, 0xc6, 0x03, 0xb2, 0x0b, 0x30, 0xe5,
	0xec, 0x49, 0xb7, 0x27, 0x26, 0x23, 0x89, 0x47, 0x92, 0xef, 0xd4, 0xe7, 0x33, 0x3b, 0x13, 0xa5,
	0xa6, 0x1a, 0x1f, 0xaa, 0xa1, 0x82, 0xfb, 0xfc, 0x31, 0x8b, 0xe0, 0xe5, 0x14, 0x9e, 0x46, 0xa9,
	0xa9, 0xc6, 0x1a, 0x7e, 0x0b, 0xd6, 0x7a, 0x62, 0xa8, 0x3a, 0x89, 0x2a, 0x2a, 0x58, 0xb1, 0x39,
	0x9f, 0xd9, 0x8b, 0x09, 0x5a, 0x8b, 0xa6, 0x99, 0x3a, 0xdf, 0x67, 0xbd, 0xb8, 0xce, 0xcc, 0xd6,
	0x65, 0x12, 0xaa, 0x0e, 0xa7, 0xba, 0xee, 0x26, 0x54, 0xc3, 0x81, 0x1b, 0xc4, 0xfd, 0x01, 0x56,
	0xad, 0xcf, 0x67, 0x76, 0x36, 0x4c, 0x01, 0x27, 0xba, 0xe2, 0x06, 0x98, 0xbe, 0x18, 0xf5, 0xb9,
	0x9c, 0x78, 0xcc, 0xaa, 0x2a, 0xa9, 0xe8, 0xeb, 0x4b, 0x82, 0x34, 0x1d, 0x92, 0x1d, 0xa8, 0xf8,
	0xae, 0xd4, 0xd8, 0x1a, 0x62, 0x6b, 0xf3, 0x99, 0x9d, 0xc4, 0x68, 0x32, 0x52, 0xc8, 0xb1, 0x08,
	0x39, 0x0a, 0x70, 0x2d, 0x45, 0xc6, 0x31, 0x9a, 0x8c, 0xd4, 0x89, 0xf6, 0x02, 0xe6, 0x4a, 0xe6,
	0x75, 0x5d, 0x69, 0xd5, 0xd3, 0x13, 0x4d, 0xa3, 0xd4, 0x8c, 0xc6, 0xef, 0x4b, 0x72, 0x05, 0xca,
	0x3c, 0xec, 0xaa, 0x13, 0xb6, 0xd6, 0x51, 0x6c, 0x78, 0xad, 0x51, 0x88, 0x96, 0x78, 0x78, 0x9f,
	0x3f, 0x66, 0xce, 0xb7, 0xb0, 0x91, 0x3a, 0x0b, 0xfb, 0x6a, 0xc2, 0x42, 0xf9, 0x6a, 0x63, 0x58,
	0x7c, 0xf6, 0x73, 0x2b, 0x9f, 0xfd, 0xfc, 0xf2, 0x67, 0xa6, 0xb0, 0xf0, 0xcc, 0x3c, 0xcd, 0xc3,
	0xe6, 0x21, 0x76, 0xac, 0x9a, 0x88, 0xf9, 0x2f, 0x40, 0x59, 0xe9, 0xba, 0x1b, 0x3d, 0x45, 0x79,
	0x5a, 0x52, 0xd3, 0x7b, 0x9e, 0x5a, 0x5c, 0x0b, 0x5d, 0xd3, 0x46, 0xea, 0x8e, 0x3d, 0x35, 0x9f,
	0xf1, 0xd4, 0xdb, 0x89, 0xa7, 0x16, 0xd0, 0x53, 0xaf, 0xbe, 0xc6, 0x53, 0x35, 0x73, 0x62, 0xad,
	0x0b, 0x4e, 0x54, 0x3c, 0xe1, 0x44, 0x57, 0xa1, 0xae, 0x93, 0x89, 0x71, 0x94, 0xd0, 0x38, 0xd6,
	0x30, 0x7a, 0x27, 0x76, 0x8f, 0x05, 0x4f, 0x2a, 0x9f, 0xf0, 0x24, 0x1b, 0xaa, 0x3a, 0xa9, 0x0f,
	0xab, 0x82, 0xa7, 0x02, 0x18, 0xfa, 0x1c, 0x4f, 0xec, 0x32, 0xd4, 0x34, 0x20, 0x3a, 0x37, 0x13,
	0x11, 0xba, 0xe8, 0x2e, 0x86, 0xc8, 0x56, 0x56, 0x90, 0x80, 0x2d, 0x64, 0x14, 0xd8, 0xc8, 0x28,
	0xb0, 0xaa, 0x8d, 0x2d, 0xd1, 0x5c, 0x23, 0xa3, 0xb9, 0x9a, 0xee, 0x2c, 0x9e, 0x3b, 0xef, 0xc1,
	0x7a, 0xf6, 0x46, 0xc6, 0xfe, 0x31, 0xd9, 0x85, 0x82, 0x32, 0x26, 0xbc, 0x8c, 0xea, 0xfe, 0xc5,
	0x95, 0x47, 0x49, 0x11, 0xe6, 0x9c, 0x85, 0xcd, 0x87, 0x63, 0x6f, 0xf1, 0x4e, 0x9d, 0x4d, 0x58,
	0xcf, 0x06, 0xc7, 0xfe, 0xb1, 0xf3, 0x2e, 0x6c, 0xde, 0x61, 0x3e, 0x5b, 0xbc, 0xfb, 0x7a, 0x6a,
	0x9e, 0x68, 0x9a, 0x17, 0xa1, 0xe2, 0x31, 0xbf, 0x7b, 0xe4, 0xbb, 0x7d, 0xed, 0x99, 0xb4, 0xec,
	0x31, 0xff, 0x03, 0xdf, 0xed, 0xab, 0x25, 0xb3, 0xf5, 0x6a, 0xc9, 0x16, 0xd4, 0x3f, 0x64, 0x32,
	0xbb, 0xde, 0x56, 0xc6, 0x8c, 0x6b, 0x2f, 0x67, 0x76, 0x65, 0x12, 0xf0, 0x03, 0x87, 0x7b, 0x8e,
	0x5a, 0xdd, 0xb9, 0x0d, 0xb5, 0x04, 0xff, 0x2f, 0x76, 0x7a, 0x04, 0xeb, 0xf7, 0x79, 0xb8, 0xc0,
	0x77, 0x03, 0xca, 0xbe, 0x1b, 0xca, 0x44, 0xbb, 0x1d, 0xf2, 0x72, 0x66, 0xd7, 0x8f, 0x44, 0x30,
	0x3c, 0x70, 0xa2, 0x84, 0x43, 0x4b, 0x6a, 0x74, 0xcf, 0x23, 0xd7, 0xa0, 0xe8, 0xf3, 0x21, 0x97,
	0xd1, 0xdb, 0x60, 0xe3, 0xe5, 0xcc, 0xae, 0x45, 0x50, 0x15, 0x76, 0xa8, 0x4e, 0x3b, 0xbf, 0x1a,
	0xb0, 0x96, 0x12, 0xa9, 0x46, 0x0f, 0xa0, 0xc8, 0x25, 0x1b, 0x86, 0x96, 0x81, 0xf2, 0x5e, 0xdd,
	0xa9, 0x7e, 0x1b, 0x20, 0x96, 0xea, 0x1f, 0xf5, 0xba, 0xd0, 0xa6, 0x97, 0xc3, 0x06, 0x11, 0xa0,
	0xed, 0x4e, 0xff, 0x90, 0x37, 0xa1, 0x32, 0x70, 0xc3, 0xee, 0x50, 0x04, 0xfa, 0xe5, 0x5e, 0xd1,
	0x96, 0x14, 0xc7, 0x68, 0x79, 0xe0, 0x86, 0x1f, 0x8b, 0x80, 0x29, 0x8b, 0x89, 0x37, 0xab, 0x5f,
	0x3d, 0x68, 0x31, 0x51, 0x28, 0xde, 0xe5, 0xfe, 0x2f, 0x45, 0xa8, 0xaa, 0x56, 0x3e, 0x61, 0xc1,
	0x94, 0xf7, 0x18, 0x19, 0x03, 0xa4, 0x0a, 0x23, 0xd7, 0x96, 0xbf, 0x8a, 0x4e, 0x9a, 0x42, 0xe3,
	0xca, 0x6b, 0x71, 0x4a, 0x00, 0xe7, 0xbe, 0xff, 0xe3, 0xef, 0x9f, 0x72, 0x75, 0xc7, 0x8c, 0xff,
	0xee, 0x85, 0x07, 0xc6, 0x75, 0xc5, 0x98, 0x8a, 0x6f, 0x05, 0xe3, 0x29, 0xc9, 0xae, 0x60, 0x3c,
	0xa9, 0xe2, 0x88, 0x71, 0xff, 0x14, 0x63, 0xaa, 0xcd, 0x15, 0x8c, 0xa7, 0xc4, 0xbf, 0x82, 0xf1,
	0xa4, 0xc8, 0x23, 0xc6, 0xeb, 0x8b, 0x8c, 0x1c, 0xca, 0x91, 0x94, 0xc9, 0x1b, 0x4b, 0x97, 0x59,
	0x7c, 0x30, 0x1a, 0x97, 0x5f, 0x0d, 0x52, 0x44, 0xe7, 0x91, 0x68, 0x83, 0xd4, 0x13, 0xa2, 0xf6,
	0x37, 0xdc, 0xfb, 0x8e, 0x8c, 0xa0, 0xaa, 0xd4, 0x78, 0x57, 0x68, 0xba, 0xe5, 0x5d, 0x9f, 0x78,
	0x30, 0x1a, 0xce, 0x6b, 0x50, 0x8a, 0xf0, 0x7f, 0x48, 0xb8, 0x4e, 0xd6, 0x52, 0xc2, 0x81, 0x90,
	0x44, 0x42, 0x5d, 0xe1, 0xee, 0xbb, 0x92, 0x85, 0xff, 0x35, 0xa5, 0x85, 0x94, 0x84, 0x6c, 0xa4,
	0x94, 0x3e, 0xf2, 0x74, 0xbe, 0xfc, 0xfd, 0x79, 0xd3, 0x78, 0xf6, 0xbc, 0x69, 0xfc, 0xf5, 0xbc,
	0x69, 0x3c, 0x7d, 0xd1, 0x3c, 0xf3, 0xec, 0x45, 0xf3, 0xcc, 0x9f, 0x2f, 0x9a, 0x67, 0x60, 0xd9,
	0xb7, 0xc3, 0x03, 0xe3, 0x8b, 0xb7, 0xfb, 0x5c, 0x0e, 0x26, 0x8f, 0x5a, 0x3d, 0x31, 0x6c, 0xf7,
	0xc5, 0x2e, 0x02, 0x42, 0xad, 0xf9, 0x36, 0x1f, 0x85, 0xbb, 0xf8, 0x55, 0x71, 0xfa, 0xab, 0xe4,
	0x9d, 0xe9, 0xde, 0xa3, 0x12, 0x7e, 0x29, 0xbc, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x48,
	0xb3, 0x5d, 0x59, 0xb6, 0x0c, 0x00, 0x00,
}

func (m *Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Video != nil {
		{
			size, err := m.Video.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPost(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.Width != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ImageType) > 0 {
		i -= len(m.ImageType)
		copy(dAtA[i:], m.ImageType)
		i = encodeVarintPost(dAtA, i, uint64(len(m.ImageType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintPost(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImageKey) > 0 {
		i -= len(m.ImageKey)
		copy(dAtA[i:], m.ImageKey)
		i = encodeVarintPost(dAtA, i, uint64(len(m.ImageKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Video) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Video) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Video) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x38
	}
	if m.Width != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x30
	}
	if m.Duration != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Duration))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintPost(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoverKey) > 0 {
		i -= len(m.CoverKey)
		copy(dAtA[i:], m.CoverKey)
		i = encodeVarintPost(dAtA, i, uint64(len(m.CoverKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VideoUrl) > 0 {
		i -= len(m.VideoUrl)
		copy(dAtA[i:], m.VideoUrl)
		i = encodeVarintPost(dAtA, i, uint64(len(m.VideoUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VideoKey) > 0 {
		i -= len(m.VideoKey)
		copy(dAtA[i:], m.VideoKey)
		i = encodeVarintPost(dAtA, i, uint64(len(m.VideoKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Post) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Post) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Post) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLike != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.IsLike))
		i--
		dAtA[i] = 0x78
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x70
	}
	if m.Position != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Position))))
		i--
		dAtA[i] = 0x6d
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x65
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x5d
	}
	if m.ShareCount != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.ShareCount))
		i--
		dAtA[i] = 0x50
	}
	if m.CollectCount != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.CollectCount))
		i--
		dAtA[i] = 0x48
	}
	if m.CommentCount != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x40
	}
	if m.LikeCount != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.LikeCount))
		i--
		dAtA[i] = 0x38
	}
	if m.ViewCount != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.ViewCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PostType != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.PostType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.Width != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ImageType) > 0 {
		i -= len(m.ImageType)
		copy(dAtA[i:], m.ImageType)
		i = encodeVarintPost(dAtA, i, uint64(len(m.ImageType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImageKey) > 0 {
		i -= len(m.ImageKey)
		copy(dAtA[i:], m.ImageKey)
		i = encodeVarintPost(dAtA, i, uint64(len(m.ImageKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreatePostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x62
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x5d
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x55
	}
	if m.CoverHeight != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.CoverHeight))
		i--
		dAtA[i] = 0x48
	}
	if m.CoverWidth != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.CoverWidth))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CoverKey) > 0 {
		i -= len(m.CoverKey)
		copy(dAtA[i:], m.CoverKey)
		i = encodeVarintPost(dAtA, i, uint64(len(m.CoverKey)))
		i--
		dAtA[i] = 0x3a
	}
	if m.VideoDuration != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.VideoDuration))))
		i--
		dAtA[i] = 0x35
	}
	if len(m.VideoKey) > 0 {
		i -= len(m.VideoKey)
		copy(dAtA[i:], m.VideoKey)
		i = encodeVarintPost(dAtA, i, uint64(len(m.VideoKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPost(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePostReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePostReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePostReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Post != nil {
		{
			size, err := m.Post.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdatePostReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePostReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePostReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeletePostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelFlag != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.DelFlag))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeletePostReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePostReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePostReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPostReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPostReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPostReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Post != nil {
		{
			size, err := m.Post.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.LastId != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.LastId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListPostReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPostReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPostReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastId) > 0 {
		i -= len(m.LastId)
		copy(dAtA[i:], m.LastId)
		i = encodeVarintPost(dAtA, i, uint64(len(m.LastId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPost(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPost(dAtA []byte, offset int, v uint64) int {
	offset -= sovPost(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovPost(uint64(l))
		}
	}
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovPost(uint64(l))
	}
	return n
}

func (m *PostImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageKey)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.ImageType)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovPost(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovPost(uint64(m.Height))
	}
	return n
}

func (m *Video) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VideoKey)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.VideoUrl)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.CoverKey)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if m.Duration != 0 {
		n += 5
	}
	if m.Width != 0 {
		n += 1 + sovPost(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovPost(uint64(m.Height))
	}
	return n
}

func (m *Post) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if m.PostType != 0 {
		n += 1 + sovPost(uint64(m.PostType))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovPost(uint64(l))
	}
	if m.ViewCount != 0 {
		n += 1 + sovPost(uint64(m.ViewCount))
	}
	if m.LikeCount != 0 {
		n += 1 + sovPost(uint64(m.LikeCount))
	}
	if m.CommentCount != 0 {
		n += 1 + sovPost(uint64(m.CommentCount))
	}
	if m.CollectCount != 0 {
		n += 1 + sovPost(uint64(m.CollectCount))
	}
	if m.ShareCount != 0 {
		n += 1 + sovPost(uint64(m.ShareCount))
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Position != 0 {
		n += 5
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPost(uint64(m.CreatedAt))
	}
	if m.IsLike != 0 {
		n += 1 + sovPost(uint64(m.IsLike))
	}
	return n
}

func (m *PostImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageKey)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.ImageType)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovPost(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovPost(uint64(m.Height))
	}
	return n
}

func (m *CreatePostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPost(uint64(m.UserId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovPost(uint64(l))
		}
	}
	l = len(m.VideoKey)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if m.VideoDuration != 0 {
		n += 5
	}
	l = len(m.CoverKey)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if m.CoverWidth != 0 {
		n += 1 + sovPost(uint64(m.CoverWidth))
	}
	if m.CoverHeight != 0 {
		n += 1 + sovPost(uint64(m.CoverHeight))
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.Latitude != 0 {
		n += 5
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	return n
}

func (m *CreatePostReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Post != nil {
		l = m.Post.Size()
		n += 1 + l + sovPost(uint64(l))
	}
	return n
}

func (m *UpdatePostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdatePostReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeletePostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	if m.DelFlag != 0 {
		n += 1 + sovPost(uint64(m.DelFlag))
	}
	return n
}

func (m *DeletePostReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	return n
}

func (m *GetPostReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Post != nil {
		l = m.Post.Size()
		n += 1 + l + sovPost(uint64(l))
	}
	return n
}

func (m *ListPostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastId != 0 {
		n += 1 + sovPost(uint64(m.LastId))
	}
	if m.Limit != 0 {
		n += 1 + sovPost(uint64(m.Limit))
	}
	return n
}

func (m *ListPostReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPost(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovPost(uint64(m.Count))
	}
	if m.HasMore {
		n += 2
	}
	l = len(m.LastId)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	return n
}

func sovPost(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPost(x uint64) (n int) {
	return sovPost(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &PostImage{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Video == nil {
				m.Video = &Video{}
			}
			if err := m.Video.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Video) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Video: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Video: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Duration = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Post) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			m.PostType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &v1.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewCount", wireType)
			}
			m.ViewCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectCount", wireType)
			}
			m.CollectCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCount", wireType)
			}
			m.ShareCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Position = float32(math.Float32frombits(v))
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLike", wireType)
			}
			m.IsLike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLike |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &PostImageRequest{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoDuration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.VideoDuration = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverWidth", wireType)
			}
			m.CoverWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverHeight", wireType)
			}
			m.CoverHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePostReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePostReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePostReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Post == nil {
				m.Post = &Post{}
			}
			if err := m.Post.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePostReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePostReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePostReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelFlag", wireType)
			}
			m.DelFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePostReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePostReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePostReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPostReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPostReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPostReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Post == nil {
				m.Post = &Post{}
			}
			if err := m.Post.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			m.LastId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPostReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPostReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPostReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Post{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPost(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPost
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPost
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPost
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPost
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPost        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPost          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPost = fmt.Errorf("proto: unexpected end of group")
)
