syntax = "proto3";

package api.micro.moment.v1;

import "google/api/annotations.proto";
import "api/micro/user/v1/user.proto";
import "gogo/protobuf/gogo.proto";

option go_package = "github.com/go-microservice/ins-api/api/micro/moment/v1;v1";
option java_multiple_files = true;
option java_package = "api.micro.moment.v1";

service CommentService {
	// 创建评论
	rpc CreateComment (CreateCommentRequest) returns (CreateCommentReply) {
		option (google.api.http) = {
			post: "/v1/comments"
			body: "*"
		};
	};
	// 删除评论
	rpc DeleteComment (DeleteCommentRequest) returns (DeleteCommentReply) {
		option (google.api.http) = {
			delete: "/v1/comments"
			body: "*"
		};
	};
	// 查看评论
	rpc GetComment (GetCommentRequest) returns (GetCommentReply) {
		option (google.api.http) = {
			get: "/v1/comments/{id}"
		};
	};
	// 热门评论列表
	rpc ListHotComment (ListCommentRequest) returns (ListCommentReply) {
		option (google.api.http) = {
			get: "/v1/comments/hot"
		};
	};
	// 最新评论列表
	rpc ListLatestComment (ListCommentRequest) returns (ListCommentReply) {
		option (google.api.http) = {
			get: "/v1/comments/latest"
		};
	};
	// 回复评论
	rpc ReplyComment (ReplyCommentRequest) returns (ReplyCommentReply) {
		option (google.api.http) = {
			post: "/v1/comments/reply"
			body: "*"
		};
	};
	// 回复列表
	rpc ListReply (ListReplyRequest) returns (ListReplyReply) {
		option (google.api.http) = {
			get: "/v1/comments/reply"
		};
	};
}

// 评论结构
message Comment {
	// 评论id
	string id = 1;
	// 帖子id
	int64 post_id = 2;
	// 用户信息
	api.micro.user.v1.User user = 3;
	// 评论内容
	string content = 4;
	// 根评论id
	int64 root_id = 5;
	// 父评论id
	int64 parent_id = 6;
	// 点赞数
	int32 like_count = 7;
	// 回复数
	int32 reply_count = 8;
	// 分数
	int64 score = 9;
	// 删除标记
	int32 del_flag = 10;
	// 创建时间
	int64 created_at = 11;
	// 更新时间
	int64 updated_at = 12;
	// 设备类型 iOS/Android
	string device_type = 13;
	// 用户id
	string ip = 14;
}

message CreateCommentRequest {
	int64 post_id = 1;
	int64 user_id = 2;
	string content = 3;
	int64 root_id = 4;
	int64 parent_id = 5;
	string device_type = 6;
	string ip = 7;
}
message CreateCommentReply {
	Comment comment = 1;
}

message UpdateCommentRequest {}
message UpdateCommentReply {}

message DeleteCommentRequest {
	string id = 1;
	int32 del_flag = 2;
}
message DeleteCommentReply {}

message GetCommentRequest {
	string id = 1 [(gogoproto.moretags) = 'uri:"id"'];
}
message GetCommentReply {
	Comment comment = 1;
}

message ListCommentRequest {
	int64 last_id = 1 [(gogoproto.moretags) = 'form:"last_id"'];
	int32 limit = 2 [(gogoproto.moretags) = 'form:"limit"'];
	int64 post_id = 3 [(gogoproto.moretags) = 'form:"post_id"'];
}
message ListCommentReply {
	repeated Comment items = 1 [(gogoproto.jsontag) = "items"];
	int64 count = 2 [(gogoproto.jsontag) = "count"];
	bool has_more = 3 [(gogoproto.jsontag) = "has_more"];
	string last_id = 4 [(gogoproto.jsontag) = "last_id"];
}

message ReplyCommentRequest {
	int64 comment_id = 1;
	int64 user_id = 2;
	string content = 3;
	int64 root_id = 4;
	int64 parent_id = 5;
	string device_type = 6;
	string ip = 7;
}
message ReplyCommentReply {
	Comment comment = 1;
}

message ListReplyRequest {
	int64 last_id = 1 [(gogoproto.moretags) = 'form:"last_id"'];
	int32 limit = 2 [(gogoproto.moretags) = 'form:"limit"'];
	int64 comment_id = 3 [(gogoproto.moretags) = 'form:"comment_id"'];
}

message ListReplyReply {
	repeated Comment items = 1 [(gogoproto.jsontag) = "items"];
	int64 count = 2 [(gogoproto.jsontag) = "count"];
	bool has_more = 3 [(gogoproto.jsontag) = "has_more"];
	string last_id = 4 [(gogoproto.jsontag) = "last_id"];
}
