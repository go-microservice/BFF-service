syntax = "proto3";

package api.micro.user.v1;

import "google/api/annotations.proto";
import "gogo/protobuf/gogo.proto";
import "openapiv3/annotations.proto";

option go_package = "github.com/go-microservice/ins-api/api/micro/user/v1;v1";

// 定义参考：https://github.com/google/gnostic/blob/main/openapiv3/OpenAPIv3.proto
// demo参考：https://github.com/google/gnostic/blob/main/cmd/protoc-gen-openapi/examples/tests/openapiv3annotations/message.proto
// spec: https://swagger.io/docs/specification/basic-structure/
option (openapi.v3.document) = {
  info: {
    title: "ins-api";
    version: "v1.0.0";
    description: "Description from annotation";
    contact: {
      name: "Contact Name";
      url: "https://github.com/go-microservice/ins-api";
      email: "";
    }
    license: {
      name: "MIT License";
      url: "https://github.com/go-microservice/ins-api/blob/main/LICENSE";
    }
  }
  servers: [
    {
      url: "http://localhost:8081";
      description: "测试环境";
    },
    {
      url: "http://ins-api.cool.io";
      description: "线上环境";
    }
  ]
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "bearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
              bearer_format: "JWT";
            }
          }
        }
      ]
    }
  }
  security: [
    {
      additional_properties: [
        {
          name: "bearerAuth";
          value: {
            value: []
          }
        }
      ]
    }
  ]
};

service UserService {
  // auth
  rpc Register(RegisterRequest) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/v1/auth/register"
      body: "*"
    };
  }
  rpc Login(LoginRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }
  rpc Logout(LogoutRequest) returns (LogoutReply) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
    };
  }

  // user
  rpc GetUser(GetUserRequest) returns (GetUserReply) {
    option (google.api.http) = {
      get: "/v1/users/{id}"
    };
  }
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserReply) {
    option (google.api.http) = {
      put: "/v1/users/{id}"
      body: "*"
    };
  }
  rpc UpdatePassword(UpdatePasswordRequest) returns (UpdatePasswordReply) {
    option (google.api.http) = {
      patch: "/v1/users/password/{id}"
      body: "*"
    };
  }
}

enum StatusType {
  NORMAL = 0;
  DELETE = 1;
  Ban = 2;
}

enum GenderType {
  UNKNOWN = 0;
  MALE = 1;
  FEMALE = 2;
};

// user info
message User {
  string id = 1 [(gogoproto.jsontag) = "id"];
  string username = 2 [(gogoproto.jsontag) = "username"];
  string email =3 [(gogoproto.jsontag) = "email"];
  string phone = 4 [(gogoproto.jsontag) = "phone"];
  int64  login_at = 5 [(gogoproto.jsontag) = "login_at"];
  StatusType status = 6 [(gogoproto.jsontag) = "status"];
  string nickname = 7 [(gogoproto.jsontag) = "nickname"];
  string avatar = 8 [(gogoproto.jsontag) = "avatar"];
  GenderType gender = 9 [(gogoproto.jsontag) = "gender"];
  string birthday = 10 [(gogoproto.jsontag) = "birthday"];
  string bio = 11 [(gogoproto.jsontag) = "bio"];
  int64 created_at = 12 [(gogoproto.jsontag) = "created_at"];
}

message RegisterRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

message RegisterReply {
  int64 id = 1;
  string username = 2;
}

message LoginRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

message LoginReply {
  string uid = 1;
  string token = 2;
}

message LogoutRequest {
  int64 id = 1;
  string token = 2;
}

message LogoutReply {
}

message CreateUserRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

message CreateUserReply {
  int64 id = 1;
  string username = 2;
  string email = 3;
}

message UpdateUserRequest {
  string id = 1;
  string username = 2;
  string email = 3;
  string phone = 4;
  int64  login_at = 5;
  StatusType status = 6;
  string nickname = 7;
  string avatar = 8;
  GenderType gender = 9;
  string birthday = 10;
  string bio = 11;
  int64 updated_at = 13;
}

message UpdateUserReply {

}

message UpdatePasswordRequest {
  string id = 1;
  string old_password = 2;
  string new_password = 3;
  string confirm_password = 4;
}

message UpdatePasswordReply {

}

message GetUserRequest {
  string id = 1 [(gogoproto.moretags) = 'uri:"id"'];
}

message GetUserReply {
  User user = 1;
}

message BatchGetUsersRequest {
  repeated int64 ids = 1;
}

message BatchGetUsersReply {
  repeated User users = 1;
}
