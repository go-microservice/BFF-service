// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: api/micro/relation/v1/relation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowReply, error)
	Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowReply, error)
	GetFollowingUserList(ctx context.Context, in *GetFollowingUserListRequest, opts ...grpc.CallOption) (*GetFollowingUserListReply, error)
	GetFollowerUserList(ctx context.Context, in *GetFollowerUserListRequest, opts ...grpc.CallOption) (*GetFollowerUserListReply, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowReply, error) {
	out := new(FollowReply)
	err := c.cc.Invoke(ctx, "/api.micro.relation.v1.RelationService/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowReply, error) {
	out := new(UnfollowReply)
	err := c.cc.Invoke(ctx, "/api.micro.relation.v1.RelationService/Unfollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFollowingUserList(ctx context.Context, in *GetFollowingUserListRequest, opts ...grpc.CallOption) (*GetFollowingUserListReply, error) {
	out := new(GetFollowingUserListReply)
	err := c.cc.Invoke(ctx, "/api.micro.relation.v1.RelationService/GetFollowingUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFollowerUserList(ctx context.Context, in *GetFollowerUserListRequest, opts ...grpc.CallOption) (*GetFollowerUserListReply, error) {
	out := new(GetFollowerUserListReply)
	err := c.cc.Invoke(ctx, "/api.micro.relation.v1.RelationService/GetFollowerUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility
type RelationServiceServer interface {
	Follow(context.Context, *FollowRequest) (*FollowReply, error)
	Unfollow(context.Context, *UnfollowRequest) (*UnfollowReply, error)
	GetFollowingUserList(context.Context, *GetFollowingUserListRequest) (*GetFollowingUserListReply, error)
	GetFollowerUserList(context.Context, *GetFollowerUserListRequest) (*GetFollowerUserListReply, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServiceServer struct {
}

func (UnimplementedRelationServiceServer) Follow(context.Context, *FollowRequest) (*FollowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedRelationServiceServer) Unfollow(context.Context, *UnfollowRequest) (*UnfollowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedRelationServiceServer) GetFollowingUserList(context.Context, *GetFollowingUserListRequest) (*GetFollowingUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingUserList not implemented")
}
func (UnimplementedRelationServiceServer) GetFollowerUserList(context.Context, *GetFollowerUserListRequest) (*GetFollowerUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerUserList not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.micro.relation.v1.RelationService/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.micro.relation.v1.RelationService/Unfollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Unfollow(ctx, req.(*UnfollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFollowingUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFollowingUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.micro.relation.v1.RelationService/GetFollowingUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFollowingUserList(ctx, req.(*GetFollowingUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFollowerUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFollowerUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.micro.relation.v1.RelationService/GetFollowerUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFollowerUserList(ctx, req.(*GetFollowerUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.micro.relation.v1.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _RelationService_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _RelationService_Unfollow_Handler,
		},
		{
			MethodName: "GetFollowingUserList",
			Handler:    _RelationService_GetFollowingUserList_Handler,
		},
		{
			MethodName: "GetFollowerUserList",
			Handler:    _RelationService_GetFollowerUserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/micro/relation/v1/relation.proto",
}
